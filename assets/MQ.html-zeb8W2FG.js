import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-OTaO6_y0.js";const t={},p=e(`<h1 id="mq" tabindex="-1"><a class="header-anchor" href="#mq" aria-hidden="true">#</a> MQ</h1><h2 id="同步调用与异步调用" tabindex="-1"><a class="header-anchor" href="#同步调用与异步调用" aria-hidden="true">#</a> 同步调用与异步调用</h2><p><strong>同步调用的优点</strong></p><ul><li>时效性强，可以立即得到结果</li></ul><p><strong>同步调用的问题</strong></p><ul><li><p>微服务间基于Feign的调用就属于同步方式，存在一定问题</p></li><li><p>耦合度高：每次加入新的需求，都要修改原来的代码</p></li><li><p>性能下降：调用者需要等待服务提供者响应，响应时间等于调用时间之和</p></li><li><p>资源浪费：调用链中的每个服务在等待响应的过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源</p></li><li><p>级联失败：如果服务出现问题，所有调用方会跟着出问题，最终导致整个微服务集群故障</p></li></ul><p><strong>异步调用方案</strong></p><ul><li><p>异步调用常见实现就是<strong>事件驱动模式</strong></p></li><li><p>优势</p><ul><li>服务解耦</li><li>性能提升，吞吐提高</li><li>服务没有强依赖，不必担心级联失败问题</li><li>流量削峰</li></ul></li><li><p>缺点</p><ul><li>依赖于Broker的可靠性、安全性、吞吐能力</li><li>架构复杂了，业务没有明显的流程线，不好跟踪管理</li></ul></li></ul><h2 id="初识mq" tabindex="-1"><a class="header-anchor" href="#初识mq" aria-hidden="true">#</a> 初识MQ</h2><ul><li><p>MQ（MessageQueue），消息队列，存放消息的队列。也就是事件驱动架构中的Broker</p></li><li><p>几种常见MQ的对比：</p></li></ul><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><ul><li><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p></li><li><p>追求可靠性：RabbitMQ、RocketMQ</p></li><li><p>追求吞吐能力：RocketMQ、Kafka</p></li><li><p>追求消息低延迟：RabbitMQ、Kafka</p></li></ul><h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h2><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230915091956461.png" alt="image-20210717162752376" tabindex="0" loading="lazy"><figcaption>image-20210717162752376</figcaption></figure><p>RabbitMQ中的一些角色：</p><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>exchange个：交换机，负责消息路由</li><li>queue：队列，存储消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔</li></ul><h3 id="常见的消息模型" tabindex="-1"><a class="header-anchor" href="#常见的消息模型" aria-hidden="true">#</a> 常见的消息模型</h3><ul><li><p>基本消息队列</p></li><li><p>工作消息队列</p></li><li><p>发布订阅</p><ul><li><p>广播</p></li><li><p>路由</p></li><li><p>主题</p></li></ul></li></ul><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230915092033218.png" alt="image-20230915091854268" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230915092021366.png" alt="image-20230915091912552" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210731180321133.png" alt="image-20230915091956461" loading="lazy"></p><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210717165309625.png" alt="image-20230915092021366" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210717165509466.png" alt="image-20230915092033218" loading="lazy"></p><h3 id="helloworld案例" tabindex="-1"><a class="header-anchor" href="#helloworld案例" aria-hidden="true">#</a> HelloWorld案例</h3><ul><li>基于基础消息队列实现</li><li>publisher：消息发布者，将消息发送给队列queue</li><li>queue：消息队列，负责接收并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230915131521327.png" alt="image-20230915092323649" tabindex="0" loading="lazy"><figcaption>image-20230915092323649</figcaption></figure><ul><li><strong>基本消息队列的消息发送流程</strong><ul><li>建立<code>connection</code></li><li>创建<code>channel</code></li><li>利用<code>channel</code>声明队列</li><li>利用<code>channel</code>向队列发送消息</li></ul></li><li><strong>基本消息队列的消息接收流程</strong><ul><li>建立<code>connection</code></li><li>创建<code>channel</code></li><li>利用<code>channel</code>声明队列</li><li>定义<code>consumer</code>的消费行为<code>handleDelivery()</code></li><li>利用<code>channel</code>将消费者与队列绑定</li></ul></li></ul><h2 id="springamqp" tabindex="-1"><a class="header-anchor" href="#springamqp" aria-hidden="true">#</a> SpringAMQP</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p><strong>AMQP</strong></p><ul><li><code>Advanced Message Queuing Protocol</code>，是用于应用程序或之间传递业务消息的开放标准。</li><li>该协议与语言和平台无关，更符合微服务中独立性的需求</li></ul><p><strong>SpringAMQP</strong></p><ul><li><p><code>SpringAMQP</code>是基于<code>AMQP</code>协议定义的一套API规范，提供了模板来发送和接收消息。</p></li><li><p>包含两部分，其中<code>spring-amqp</code>是基础抽象，<code>spring-rabbit</code>是底层的默认实现</p></li></ul><h3 id="basicqueue" tabindex="-1"><a class="header-anchor" href="#basicqueue" aria-hidden="true">#</a> BasicQueue</h3><ul><li>父工程中引入依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消息发送" tabindex="-1"><a class="header-anchor" href="#消息发送" aria-hidden="true">#</a> 消息发送</h4><ul><li>配置MQ地址，在publisher服务的application.yml中添加配置</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.62.129
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /
    <span class="token key atrule">username</span><span class="token punctuation">:</span> lgy
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自动装填RabbitTemplate实现消息发送</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage2SimpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, spring ampq&quot;</span><span class="token punctuation">;</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消息接收" tabindex="-1"><a class="header-anchor" href="#消息接收" aria-hidden="true">#</a> 消息接收</h4><ul><li>配置MQ地址，在consumer服务的application.yml中添加配置</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.62.129
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /
    <span class="token key atrule">username</span><span class="token punctuation">:</span> lgy
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建类<code>listener.SpringRabbitListener</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRabbitListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenSimpleQueueMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到simple.queue的消息：【&quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="workqueue" tabindex="-1"><a class="header-anchor" href="#workqueue" aria-hidden="true">#</a> WorkQueue</h3><ul><li>工作队列，可以提高消息处理速度，避免队列消息堆积</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210717164238910.png" alt="image-20210717164238910" tabindex="0" loading="lazy"><figcaption>image-20210717164238910</figcaption></figure><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量，实现能者多劳</li></ul><h3 id="public-subscribe" tabindex="-1"><a class="header-anchor" href="#public-subscribe" aria-hidden="true">#</a> public-subscribe</h3><ul><li>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者，实现方式是加入了exchange（交换机）</li><li>常见的交换机类型包括 <ul><li>Fanout：广播</li><li>Direct：路由</li><li>Topic：主题</li></ul></li><li>交换机负责消息路由，而不是存储，路由失败则消息丢失</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210717170041447.png" alt="image-20210717165309625" tabindex="0" loading="lazy"><figcaption>image-20210717165309625</figcaption></figure><h4 id="fanoutexchange" tabindex="-1"><a class="header-anchor" href="#fanoutexchange" aria-hidden="true">#</a> FanoutExchange</h4><ul><li>FanoutExchange会将接收到的消息路由到每一个跟其绑定的queue</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230915092323649.png" alt="image-20210717165509466" tabindex="0" loading="lazy"><figcaption>image-20210717165509466</figcaption></figure><h5 id="声明队列" tabindex="-1"><a class="header-anchor" href="#声明队列" aria-hidden="true">#</a> 声明队列</h5><ul><li><p><strong>创建Bean配置交换机和队列</strong></p></li><li><p>在consumer中创建一个config类，配置交换机，队列，以及绑定关系</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义fanout交换机</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">&quot;lgy.fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
	
    <span class="token comment">// 定义第一个消息队列</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">fanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;fanout.queue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

    <span class="token comment">// 将第一个队列绑定到交换机上</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">fanoutBinding1</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> fanoutQueue1<span class="token punctuation">,</span> <span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fanoutQueue1<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 定义第二个消息队列</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">fanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;fanout.queue2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

    <span class="token comment">// 将第二个队列绑定到交换机上</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">fanoutBinding2</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> fanoutQueue2<span class="token punctuation">,</span> <span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fanoutQueue2<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="消息发送-1" tabindex="-1"><a class="header-anchor" href="#消息发送-1" aria-hidden="true">#</a> 消息发送</h5><ul><li>定义交换机名称，使用<code>rabbitTemplate.convertAndSend()</code>发送消息</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;lgy.fanout&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, everyone!&quot;</span><span class="token punctuation">;</span>
rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="消息接收-1" tabindex="-1"><a class="header-anchor" href="#消息接收-1" aria-hidden="true">#</a> 消息接收</h5><ul><li>在consumer服务的Listener中添加两个消费方法，作为消费者</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;fanout.queue1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fanoutQueue1Listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到fanout.queue1消息：【&quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;fanout.queue2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fanoutQueue2Listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到fanout.queue2消息：【&quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>消费者接收到fanout.queue1消息：【hello, everyone<span class="token operator">!</span>】
消费者接收到fanout.queue2消息：【hello, everyone<span class="token operator">!</span>】
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="directexchange" tabindex="-1"><a class="header-anchor" href="#directexchange" aria-hidden="true">#</a> DirectExchange</h4><ul><li>DirectExchange会将接收到的消息根据规则路由道指定的Queue， 称为路由模式（routes）</li><li>每一个Queue都与Exchange设置一个BindingKey</li><li>发布者发送消息的时候，指定消息的RoutingKey</li><li>Exchange将消息路由到Binding Key与消息Routing Key一致的队列</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210717170705380.png" alt="image-20210717170041447" tabindex="0" loading="lazy"><figcaption>image-20210717170041447</figcaption></figure><h5 id="声明队列与消息接收" tabindex="-1"><a class="header-anchor" href="#声明队列与消息接收" aria-hidden="true">#</a> 声明队列与消息接收</h5><ul><li><strong>基于注解声明队列和交换机</strong></li><li>在<code>listener</code>方法的注解<code>@RabbitListener()</code>里面声明</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;direct.queue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;lgy.direct&quot;</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">DIRECT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        key <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;route1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;route2&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">directQueue1Listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到direct.queue1消息：【&quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="消息发送-2" tabindex="-1"><a class="header-anchor" href="#消息发送-2" aria-hidden="true">#</a> 消息发送</h5><ul><li>须在<code>convertAndSend()</code>中指明<code>routingKey</code>参数</li><li>消息会路由到与<code>routingkey</code>相匹配的路由处</li><li><code>routingKey</code>为空则效果等同于广播（FanoutExchange）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;lgy.direct&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, yellow!&quot;</span><span class="token punctuation">;</span>
rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="topicexchange" tabindex="-1"><a class="header-anchor" href="#topicexchange" aria-hidden="true">#</a> TopicExchange</h4><ul><li>TopicExchange与DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以<code>.</code>分割</li><li>Queue与Exchange指定BindKey的时候可以使用通配符 <ul><li><code>#</code>：代指0个或多个单词</li><li><code>*</code>：代指1个单词</li></ul></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210731154257653.png" alt="image-20210717170705380" tabindex="0" loading="lazy"><figcaption>image-20210717170705380</figcaption></figure><h5 id="声明队列与消息接收-1" tabindex="-1"><a class="header-anchor" href="#声明队列与消息接收-1" aria-hidden="true">#</a> 声明队列与消息接收</h5><ul><li>整体代码与direct差不多</li><li><code>type</code>改为TOPIC</li><li><code>key</code>增加了通配符</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;topic.queue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;lgy.topic&quot;</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        key <span class="token operator">=</span> <span class="token string">&quot;china.#&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">topicQueue1Listener</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到topic.queue1消息：【&quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">&quot;】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="消息发送-3" tabindex="-1"><a class="header-anchor" href="#消息发送-3" aria-hidden="true">#</a> 消息发送</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;lgy.topic&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, china.news!&quot;</span><span class="token punctuation">;</span>
rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;china.news&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消息转换器" tabindex="-1"><a class="header-anchor" href="#消息转换器" aria-hidden="true">#</a> 消息转换器</h3><ul><li>Spring对消息的处理的默认实现是<code>SimpleMessageConverter</code>，基于JDK的<code>ObjectOutputStream</code>完成序列化</li><li>如果要修改只需要自定义一个<code>MessageConverter</code>类型的Bean即可</li><li>推荐用JSON的方式序列化</li></ul><h4 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤" aria-hidden="true">#</a> 实现步骤</h4><ul><li>在publisher服务中引入依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在publisher服务中声明<code>MessageConverter</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">MessageConverter</span> <span class="token function">jsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;object.queue&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;燕子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20210731175806273.png" alt="image-20230915131521327" tabindex="0" loading="lazy"><figcaption>image-20230915131521327</figcaption></figure>`,89),i=[p];function o(l,c){return a(),s("div",null,i)}const r=n(t,[["render",o],["__file","MQ.html.vue"]]);export{r as default};
