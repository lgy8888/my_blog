import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-OTaO6_y0.js";const p={},e=t(`<h1 id="张量与基本数据类型" tabindex="-1"><a class="header-anchor" href="#张量与基本数据类型" aria-hidden="true">#</a> 张量与基本数据类型</h1><h2 id="张量的概念" tabindex="-1"><a class="header-anchor" href="#张量的概念" aria-hidden="true">#</a> 张量的概念</h2><ul><li>pytorch最基本的操作对象是Tensor（张量）</li><li>它表示一个多维矩阵</li><li>张量类似于Numpy的ndarrays</li><li>张量可以在GPU上使用以加速运算</li></ul><ul><li><p>概念解析</p><ul><li><p>标量（Scalar）：是只有大小没有方向的量，如$1、2、3$等</p></li><li><p>向量（Vector）：是有大小有方向的量，如 $[1,2,3]$</p></li><li><p>矩阵（Matrix）：是由多个向量组成的，如 $[[1,2,3],[4,5,6]]$</p></li><li><p>张量（Tensor）：是基于向量和矩阵的推广，标量视为零阶张量，向量视为一阶张量，矩阵视为二阶张量</p><ul><li>张量是支持高效的科学计算的数组，它可以是一个数（标量），一维数组（向量），二维数组（矩阵），更高维的数组（高阶数据）</li></ul></li></ul></li><li><p>张量（Tensor）和 Numpy 的数组 ndarray 通常可以共享相同的底层内存，无需复制数据</p></li></ul><h2 id="张量的基本数据类型" tabindex="-1"><a class="header-anchor" href="#张量的基本数据类型" aria-hidden="true">#</a> 张量的基本数据类型</h2><ul><li><strong>32位浮点型</strong>：<code>torch.float32/torch.float</code> (常见)</li><li>64位浮点型：<code>torch.float64</code></li><li><strong>64位整形</strong>：<code>torch.int64/torch.long</code> (常见)</li><li>16位整型：<code>torch.int16</code></li><li>32位整型：<code>torch.int32</code></li></ul><h2 id="张量的创建" tabindex="-1"><a class="header-anchor" href="#张量的创建" aria-hidden="true">#</a> 张量的创建</h2><p><strong>张量的构造方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 从列表创建tensor，根据输入的值的类型构造 （整形 -&gt; int64, 浮点型 -&gt; float32）</span>
t <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># 可以在默认列表构造方法中添加dtype参数，指定该tensor的数据类型</span>

t <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 构造float32类型的tensor （float32一般用于特征值）</span>
t <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 构造int64类型的tensor (int64一般用于标签值）</span>

np_array <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np_array<span class="token punctuation">)</span> <span class="token comment"># 从ndarray创建tensor，转换后tensor的数据类型继承自ndarray</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>张量的常见属性及方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t<span class="token punctuation">.</span>dtype <span class="token comment"># 获取tensor的类型</span>
np_array<span class="token punctuation">.</span>dtype <span class="token comment"># 获取ndarray的数据类型</span>
torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 从0-1之间取值，创建一个形状为2x3的张量</span>
torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个随机的基于正态分布的形状为2x3的张量 n -&gt; normal</span>
torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个形状为3x4的全0矩阵</span>
torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个形状为3x2的全1矩阵</span>
torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment"># 返回一个与t数据类型和形状相同的全0张量</span>
torch<span class="token punctuation">.</span>rand_like<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment"># 返回一个与t数据类型和形状相同的随机张量</span>
t<span class="token punctuation">.</span>shape <span class="token comment"># 属性获取张量形状</span>
t<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 方法获取张量形状 return -&gt; torch.Size([2, 3])</span>
t<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 传入第几维，获取第几维张量的形状 return -&gt; 2</span>
t<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># return -&gt; 3</span>
t<span class="token punctuation">.</span>device <span class="token comment"># 获取张量的运行设备环境</span>
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 查看主机是否支持显存（GPU）</span>
t <span class="token operator">=</span> t<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 转换张量的运行设备环境</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="张量的运算" tabindex="-1"><a class="header-anchor" href="#张量的运算" aria-hidden="true">#</a> 张量的运算</h2><p><strong>张量数据类型的转换</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float16<span class="token punctuation">)</span> <span class="token comment"># 转换数据类型，传入参数为目标数据类型</span>
t<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 将t转换为int64类型</span>
t<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 将t转换为float32类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>张量的运算</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 普通的运算符：+ - * / % </span>
t <span class="token operator">+</span> t1
t<span class="token punctuation">.</span>add<span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token comment"># 调用方法完成加法，效果同t + t1</span>
t<span class="token punctuation">.</span>add_<span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token comment"># 在运算后将结果赋给t（覆盖）</span>

t<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回张量绝对值</span>
t<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回张量均值</span>
t<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回张量所有元素总和</span>

t<span class="token punctuation">.</span>T <span class="token comment"># 矩阵转置</span>
t<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>t<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token comment"># 矩阵乘法（传入的参数必须遵循矩阵乘法的规则，如(2,3)@(3,2)，(2,3)@(3,4)）</span>
t@<span class="token punctuation">(</span>t<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token comment"># 矩阵乘法运算符</span>
t<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 将一维张量转换为对应的python数据类型</span>
t1<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回numpy数据类型（ndarray）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="张量的变形" tabindex="-1"><a class="header-anchor" href="#张量的变形" aria-hidden="true">#</a> 张量的变形</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 将（4,6）的张量的形状转换为（24,1），-1表示自动计算</span>
torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 常见的数据输入模式（banch，length，heigth，channel）</span>
torch<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment"># 去掉张量中维度为1的数据，相当于将多于的括号去掉, 如：[[[1,2],[1,2]]] -&gt; [[1,2],[1,2]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="张量的自动微分" tabindex="-1"><a class="header-anchor" href="#张量的自动微分" aria-hidden="true">#</a> 张量的自动微分</h2><ul><li>自动微分：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t<span class="token punctuation">.</span>requires_grad <span class="token comment"># 返回当前张量是否支持自动微分</span>
y <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">5</span>
y<span class="token punctuation">.</span>grad_fn <span class="token comment"># 返回计算得到此张量的方法 -&gt; &lt;AddBackward0 at 0x1df9ab79a20&gt;</span>
t<span class="token punctuation">.</span>grad <span class="token comment"># 打印t的梯度，d(out)/d(t)，grad属性会记录计算得到的梯度</span>

<span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 在该上下文管理器中，张量不再进行自动记录梯度</span>
    y <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">2</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment"># -&gt; False</span>

t<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 设置当前张量不再自动记录梯度</span>
result <span class="token operator">=</span> out<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 截断自动微分运算，detach只后的运算都不再跟踪</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>张量的数据结构</strong></p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230731222218932.png" alt="image-20230731222218932" tabindex="0" loading="lazy"><figcaption>image-20230731222218932</figcaption></figure>`,23),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","张量与基本数据类型.html.vue"]]);export{d as default};
