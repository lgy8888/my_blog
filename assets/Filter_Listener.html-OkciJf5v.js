import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-OTaO6_y0.js";const t={},i=e(`<h1 id="filter-listener" tabindex="-1"><a class="header-anchor" href="#filter-listener" aria-hidden="true">#</a> Filter&amp;Listener</h1><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> Filter</h2><h3 id="filter简述" tabindex="-1"><a class="header-anchor" href="#filter简述" aria-hidden="true">#</a> Filter简述</h3><ul><li>概念：Filter表示过滤器，是JavaWeb三大组件（Servlet, Filter, Listener之一）</li><li>过滤器可以把对资源的请求<strong>拦截</strong>下来，从而实现一些特殊的功能</li><li>过滤器一般完成一些<strong>通用</strong>的操作，比如：权限控制，统一编码处理，敏感字符处理</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230312172122252.png" alt="image-20230312172122252" tabindex="0" loading="lazy"><figcaption>image-20230312172122252</figcaption></figure><h3 id="filter快速入门" tabindex="-1"><a class="header-anchor" href="#filter快速入门" aria-hidden="true">#</a> Filter快速入门</h3><ul><li><p>定义类：实现Filter接口，重写其所有方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置Filter拦截资源的路径，在类上定义<code>@WebFilter</code>注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在doFilter中实现操作，最后放行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">{</span>
    chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="filter执行流程" tabindex="-1"><a class="header-anchor" href="#filter执行流程" aria-hidden="true">#</a> Filter执行流程</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230313223540423.png" alt="image-20230313214800974" tabindex="0" loading="lazy"><figcaption>image-20230313214800974</figcaption></figure><ul><li>放行后访问对应资源，资源访问完成后会回到Filter中</li><li>如果回到Filter中，执行的是放行后逻辑</li><li>执行放行前逻辑 -&gt; 放行 -&gt; 访问资源 -&gt; 执行放行后逻辑</li></ul><h3 id="filter使用细节" tabindex="-1"><a class="header-anchor" href="#filter使用细节" aria-hidden="true">#</a> Filter使用细节</h3><h4 id="filter拦截路径配置" tabindex="-1"><a class="header-anchor" href="#filter拦截路径配置" aria-hidden="true">#</a> Filter拦截路径配置</h4><ul><li><p>Filter可以根据需求，配置不通过的拦截资源路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;  &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拦截具体资源：<code>/index.jsp</code></li><li>目录拦截：<code>/user*</code></li><li>后缀名拦截：<code>*.jsp</code></li><li>拦截所有：<code>/*</code></li></ul></li></ul><h4 id="过滤器链" tabindex="-1"><a class="header-anchor" href="#过滤器链" aria-hidden="true">#</a> 过滤器链</h4><ul><li>一个Web应用，可以配置多个过滤器，这多个过滤器称为过滤器链</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230313214800974.png" alt="image-20230313215936576" tabindex="0" loading="lazy"><figcaption>image-20230313215936576</figcaption></figure><ul><li>过滤器链优先级按照过滤器名字的字符串自然排序</li></ul><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><ul><li>需求：访问服务器资源时，需要进行登录验证，如果没有登录，则自动跳转登录界面</li><li>判断：遇到登录注册相关的拦截，不相关的放行</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230314102600767.png" alt="image-20230313223540423" tabindex="0" loading="lazy"><figcaption>image-20230313223540423</figcaption></figure><h2 id="listener" tabindex="-1"><a class="header-anchor" href="#listener" aria-hidden="true">#</a> Listener</h2><h3 id="listener简介" tabindex="-1"><a class="header-anchor" href="#listener简介" aria-hidden="true">#</a> Listener简介</h3><ul><li><p>概念：Listener表示监听器，是JavaWeb三大组件之一（Servlet，Filter，Listener）</p></li><li><p>监听器可以监听就是在application，session，request三个对象创建，销毁或者往其中添加修改删除属性时自动执行代码的功能组件</p></li><li><p>Listener分类：JavaWeb提供了8个监听器</p><table><thead><tr><th>监听器分类</th><th>监听器名称</th><th>作用</th></tr></thead><tbody><tr><td>ServletContext监听</td><td>ServletContextListener</td><td>对ServletContext对象进行监听（创建，销毁）</td></tr><tr><td></td><td>ServletContextAttributeListener</td><td>对ServletContext对象中的属性进行监听（增删改）</td></tr><tr><td>Session监听</td><td>HttpSessionListener</td><td>对Session对象进行监听（创建，销毁）</td></tr><tr><td></td><td>HttpSessionAttributeListener</td><td>对Session对象中的属性进行监听（增删改）</td></tr><tr><td></td><td>HttpSessionBindingListener</td><td>监听对象于Session的绑定和解除</td></tr><tr><td></td><td>HttpSessionActivationListener</td><td>对Session数据的钝化和活化的监听</td></tr><tr><td>Request监听</td><td>ServletRequestListener</td><td>对Request对象进行监听（创建，销毁）</td></tr><tr><td></td><td>ServletRequestAttributeListener</td><td>对Request对象中的属性进行监听（增删改）</td></tr></tbody></table></li><li><p>ServletContextListener使用</p><ul><li><p>定义类，实现ServletContextListener接口</p></li><li><p>在类上加<code>@WebListener</code>注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebListener</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoaderListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token comment">// ServletContext对象被创建：整个web应用发布成功</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 加载资源</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ServletContext对象被销毁：整个web应用卸载</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 释放资源</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,23),l=[i];function o(p,c){return a(),s("div",null,l)}const u=n(t,[["render",o],["__file","Filter_Listener.html.vue"]]);export{u as default};
