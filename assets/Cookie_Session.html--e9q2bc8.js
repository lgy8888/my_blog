import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,f as e}from"./app-OTaO6_y0.js";const i={},o=e(`<h1 id="cookie-session" tabindex="-1"><a class="header-anchor" href="#cookie-session" aria-hidden="true">#</a> Cookie&amp;Session</h1><h2 id="会话跟踪技术" tabindex="-1"><a class="header-anchor" href="#会话跟踪技术" aria-hidden="true">#</a> 会话跟踪技术</h2><ul><li>会话：用户打开浏览器，访问web服务器的资源，会话建立，，知道有一方锻炼开链接，会话结束，在一次会话中可以包含<strong>多次</strong>请求和响应</li><li>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自同一浏览器，以便在同一次会话的多次请求间<strong>共享数据</strong></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230309155734348.png" alt="image-20230309145529864" tabindex="0" loading="lazy"><figcaption>image-20230309145529864</figcaption></figure><ul><li>HTPP协议是无状态，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求，因此我们需要会话跟踪技术，实现会话内数据的共享</li><li>实现方式： <ul><li>客户端会话跟踪技术：Cookies</li><li>服务端会话跟踪技术：Session</li></ul></li></ul><h2 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> Cookies</h2><h2 id="cookies基本使用" tabindex="-1"><a class="header-anchor" href="#cookies基本使用" aria-hidden="true">#</a> Cookies基本使用</h2><ul><li><p>Cookie：客户端会话技术，将数据保存到客户端，以后每次请求携带Cookie数据进行访问</p></li><li><p>Cookie基本使用</p><ul><li><p>发送Cookies</p><ul><li><p>创建Cookie对象，设置数据:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>发送Cookies到客户端，使用response对象:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>获取Cookies</p><ul><li><p>获取客户端携带的所有Cookie，使用request对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>遍历数组，获取每一个Cookie对象</p></li><li><p>使用Cookie对象方法获取数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h2 id="cookies原理" tabindex="-1"><a class="header-anchor" href="#cookies原理" aria-hidden="true">#</a> Cookies原理</h2><ul><li>Cookie的实现是基于HTTP协议的 <ul><li>响应头：set-cookie</li><li>请求头：cookie</li></ul></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230309145133491.png" alt="image-20230309152252546" tabindex="0" loading="lazy"><figcaption>image-20230309152252546</figcaption></figure><h2 id="cookies使用细节" tabindex="-1"><a class="header-anchor" href="#cookies使用细节" aria-hidden="true">#</a> Cookies使用细节</h2><ul><li>Cookie存活时间 <ul><li>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</li><li>setMaxAge(int seconds)：设置Cookie存活时间 <ul><li>正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储，到时间自动删除</li><li>负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，Cookie被销毁</li><li>0：删除对应的Cookie</li></ul></li></ul></li><li>Cookie存储中文 <ul><li>Cookie不能直接存储中文</li><li>如需要存储，则需要进行转码：URL编码</li></ul></li></ul><h2 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> Session</h2><h2 id="session基本使用" tabindex="-1"><a class="header-anchor" href="#session基本使用" aria-hidden="true">#</a> Session基本使用</h2><ul><li><p>服务端会话跟踪技术：将数据保存到服务端</p></li><li><p>JavaEE提供HttpSession接口，来实现一次会话的多次请求间的数据共享功能</p></li><li><p>使用：</p><ul><li><p>获取Session对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Session对象功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//存储数据到session域中</span>
<span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据key获取值</span>
<span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据key删除键值对</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="session原理" tabindex="-1"><a class="header-anchor" href="#session原理" aria-hidden="true">#</a> Session原理</h2><ul><li>Session是基于Cookie实现的</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230309145529864.png" alt="image-20230309155734348" tabindex="0" loading="lazy"><figcaption>image-20230309155734348</figcaption></figure><h2 id="session使用细节" tabindex="-1"><a class="header-anchor" href="#session使用细节" aria-hidden="true">#</a> Session使用细节</h2><ul><li><p>Session的钝化、活化</p><ul><li>钝化：在服务器正常关闭之后，Tomcat会自动将Session数据写入硬盘的文件中国</li><li>活化：再次启动服务器后，从文件中加载数据到Session中</li></ul></li><li><p>Session销毁</p><ul><li><p>默认情况下，无操作30分钟后自动销毁</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用Session对象的invalidate()方法</p></li></ul></li></ul><h2 id="会话跟踪技术小结" tabindex="-1"><a class="header-anchor" href="#会话跟踪技术小结" aria-hidden="true">#</a> 会话跟踪技术小结</h2><ul><li>Cookie和Session都是来完成一次会话内多次请求间<strong>数据共享</strong>的</li><li>区别：</li></ul><table><thead><tr><th></th><th>Cookie</th><th>Session</th></tr></thead><tbody><tr><td>存储位置</td><td>客户端</td><td>服务端</td></tr><tr><td>安全性</td><td>不安全（可能在网络传输过程中被截获）</td><td>安全（服务器很难被攻破）</td></tr><tr><td>数据大小</td><td>最大3KB</td><td>无大小限制</td></tr><tr><td>存储时间</td><td>可长期存储（setMaxAge）</td><td>默认情况30min（浏览器关闭后会随着Cookie销毁而变换）</td></tr><tr><td>服务器性能</td><td>不占用服务器资源</td><td>占用服务器资源</td></tr></tbody></table><ul><li>实际场景 <ul><li>购物车（Cookie）</li><li>用户名（Session）</li><li>记住我（Cookie）（现在少用）</li><li>验证码（Session）</li></ul></li><li>Cookie是用来保证用户未登录情况下的身份识别</li><li>Session是用来存储用户登录后的信息</li></ul><h2 id="登录注册案例" tabindex="-1"><a class="header-anchor" href="#登录注册案例" aria-hidden="true">#</a> 登录注册案例</h2><h2 id="需求说明" tabindex="-1"><a class="header-anchor" href="#需求说明" aria-hidden="true">#</a> 需求说明</h2><ul><li>完成用户登录功能后，如果用户勾选“记住用户”，则下次访问登录页面自动填充用户名密码</li><li>完成注册功能，并实现验证码功能</li></ul><h2 id="用户登录" tabindex="-1"><a class="header-anchor" href="#用户登录" aria-hidden="true">#</a> 用户登录</h2><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230311004440404.png" alt="image-20230310095619824" tabindex="0" loading="lazy"><figcaption>image-20230310095619824</figcaption></figure><h2 id="记住用户" tabindex="-1"><a class="header-anchor" href="#记住用户" aria-hidden="true">#</a> 记住用户</h2><ul><li><h3 id="写cookie" tabindex="-1"><a class="header-anchor" href="#写cookie" aria-hidden="true">#</a> 写Cookie<img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230311004408084.png" alt="image-20230311004440404" loading="lazy"></h3></li><li><h3 id="获取cookie" tabindex="-1"><a class="header-anchor" href="#获取cookie" aria-hidden="true">#</a> 获取cookie<img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230310095619824.png" alt="image-20230311004408084" loading="lazy"></h3></li></ul><h2 id="用户注册" tabindex="-1"><a class="header-anchor" href="#用户注册" aria-hidden="true">#</a> 用户注册</h2><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230311004625065.png" alt="image-20230311004625065" tabindex="0" loading="lazy"><figcaption>image-20230311004625065</figcaption></figure><h2 id="校验验证码" tabindex="-1"><a class="header-anchor" href="#校验验证码" aria-hidden="true">#</a> 校验验证码<img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230312171118213.png" alt="image-20230312171118213" loading="lazy"></h2>`,35),t=[o];function l(c,p){return s(),n("div",null,t)}const r=a(i,[["render",l],["__file","Cookie_Session.html.vue"]]);export{r as default};
