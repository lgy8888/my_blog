import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,f as t}from"./app-OTaO6_y0.js";const e={},i=t(`<h1 id="线性表" tabindex="-1"><a class="header-anchor" href="#线性表" aria-hidden="true">#</a> 线性表</h1><h2 id="线性表的概念" tabindex="-1"><a class="header-anchor" href="#线性表的概念" aria-hidden="true">#</a> 线性表的概念</h2><ul><li>线性表是n个数据类型相同的数据元素组成的有限序列，数据元素之间是一对一的关系，即每个数据元素最多有一个直接前驱和直接后继</li><li>线性表是一种最简单、最常见的数据结构，栈、队列、数组、字符串、堆等都符合线性表的条件</li></ul><h2 id="线性表的特点" tabindex="-1"><a class="header-anchor" href="#线性表的特点" aria-hidden="true">#</a> 线性表的特点</h2><ul><li>线性表有同一类型的数据元素组成，每个ai必须属于同一个数据类型</li><li>线性表中的数据元素个数是有限的，表长就是表中数据元素的个数</li><li>存在唯一的第一个数据元素，存在唯一的最后一个数据元素</li><li>除第一个数据元素外，每个数据元素均有且只有一个前驱元素</li><li>除最后一个数据元素外，每个数据元素均有且只有一个后继元素</li></ul><h2 id="线性表的顺序存储" tabindex="-1"><a class="header-anchor" href="#线性表的顺序存储" aria-hidden="true">#</a> 线性表的顺序存储</h2><ul><li>线性表的顺序存储结构是指在计算机中用一组地址连续的存储单元依次存储线性表的各个数据元素，元素之间的逻辑关系通过存储位置来反映，用这种存储形式存储的线性表被称为顺序表</li><li>顺序表具有按数据元素的序号随机存取的特点，但插入和删除操作需要移动大量数据元素</li></ul><h2 id="线性表的链式存储" tabindex="-1"><a class="header-anchor" href="#线性表的链式存储" aria-hidden="true">#</a> 线性表的链式存储</h2><ul><li>线性表的链式存储结构不需要用到地址连续的存储单元来实现，因为它不要求逻辑上相邻的两个数据元素物理位置上也相邻，它是通过“链”建立起数据元素之间的逻辑关系，因此对线性链表的插入、删除操作不需要移动数据元素</li><li>链表可分为单链表、循环单链表和双向链表。链表是常用的存储方式，不仅用来表示线性表，而且可以用来表示各种非线性的数据结构</li><li>链表中一定注意理解头指针、头结点、首元结点（表头节点）三个概念</li><li>在单链表中有无头结点的区别如下： <ul><li>无头结点，则在第一个随机数前插入元素或删除第一个数据元素时（也就是涉及空表时），链表的头指针总在变化</li><li>有头结点，任何数据节点的插入或删除操作都将统一</li></ul></li><li>线性链表的插入删除操作虽然不需要移动数据元素，但需要查找插入删除的位置，所以时间复杂度任然是$O(n)$</li></ul><h2 id="两种存储结构的比较" tabindex="-1"><a class="header-anchor" href="#两种存储结构的比较" aria-hidden="true">#</a> 两种存储结构的比较</h2><table><thead><tr><th>结构比较</th><th>顺序存储结构</th><th>链式存储结构</th></tr></thead><tbody><tr><td>逻辑关系体现</td><td>位置相邻反映逻辑关系</td><td>指针</td></tr><tr><td>是否按序号随机存取</td><td>是</td><td>否</td></tr><tr><td>插入、删除操作</td><td>需要移动大量数据元素</td><td>只需要修改指针</td></tr></tbody></table><h2 id="线性表的典型案例" tabindex="-1"><a class="header-anchor" href="#线性表的典型案例" aria-hidden="true">#</a> 线性表的典型案例</h2><ul><li>约瑟夫环</li><li>采用线性表标记n个人，设n=5，start=1，distance=3，5个人分别标记为ABCDE</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230625104322429.png" alt="image-20230625104322429" tabindex="0" loading="lazy"><figcaption>image-20230625104322429</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Josephus</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    创建一个线性表对象list，插入从<span class="token char">&#39;A&#39;</span>开始的n个元素；
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 循环，每趟删除一个元素</span>
        从start开始循环计数到distance，该元素出列（从线性表中删除），并将		   start设置为下一个元素的序号，下一轮计数从此开始<span class="token punctuation">;</span>
        n<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 完成一轮计数并删除元素后，线性表长度减1</span>
    <span class="token punctuation">}</span>
    list中最后剩下的一个元素即是所求者
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),l=[i];function d(c,r){return n(),s("div",null,l)}const u=a(e,[["render",d],["__file","线性表.html.vue"]]);export{u as default};
