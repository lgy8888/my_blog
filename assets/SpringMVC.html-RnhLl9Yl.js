import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-OTaO6_y0.js";const e={},i=t(`<h1 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc" aria-hidden="true">#</a> SpringMVC</h1><h2 id="springmvc简介" tabindex="-1"><a class="header-anchor" href="#springmvc简介" aria-hidden="true">#</a> SpringMVC简介</h2><h3 id="springmvc概述" tabindex="-1"><a class="header-anchor" href="#springmvc概述" aria-hidden="true">#</a> SpringMVC概述</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326102321600.png" alt="image-20230325201655021" tabindex="0" loading="lazy"><figcaption>image-20230325201655021</figcaption></figure><ul><li>SpringMVC是一种基于Java实现MVC模型的轻量级web框架</li><li>优点 <ul><li>使用简单，开发便捷</li><li>灵活性强</li></ul></li></ul><h3 id="springmvc入门案例" tabindex="-1"><a class="header-anchor" href="#springmvc入门案例" aria-hidden="true">#</a> SpringMVC入门案例</h3><ul><li>导入SpringMVC坐标和Servlet坐标 <ul><li>SpringMVC坐标包含了<code>spring-context</code></li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建SpringMVC控制器类(等同于Servlet类)</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user save ~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;{&#39;module&#39; : &#39;springmvc&#39;}&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>初始化SpringMVC环境(同spring环境), 设定了SpringMVC加载对应的bean</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.LGYNB.controller&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>初始化Servlet容器, 加载SpringMVC环境, 并设置SpringMVC技术处理的请求</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContainersInitConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDispatcherServletInitializer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载SpringMVC容器配置</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigWebApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringMvcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置哪些请求归属SpringMVC处理</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 加载spring容器配置</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>小结</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th></tr></thead><tbody><tr><td><code>@Controller</code></td><td>类注解</td><td>SpringMVC控制器类的上方</td><td>设定SpringMVC的核心控制器bean</td></tr><tr><td><code>@RequestMapping</code></td><td>方法注解</td><td>SpringMVC控制器方法定义上方</td><td>设置当前控制器方法请求访问路径(默认的<code>value</code>属性)</td></tr><tr><td><code>@ResponseBody</code></td><td>方法注解</td><td>SpringMVC控制器方法定义上方</td><td>设置当前控制器方法响应内容为当前返回值,无需解析</td></tr></tbody></table><ul><li><p>SpringMVC入门程序开发总结(1+N)</p><ul><li>一次性工作 <ul><li>创建工程, 设置服务器, 加载工程</li><li>导入坐标</li><li>创建web容器启动类, 加载SpringMVC配置, 并设置SpringMVC请求拦截路径</li><li>SpringMVC（设置核心配置类，扫描controller包，加载Controller控制器bean）</li></ul></li><li>多次工作 <ul><li>定义处理请求的控制器类</li><li>定义处理请求的控制器方法，并配置映射路径（<code>@RequestMapping</code>）与返回JSON数据（<code>@ResponseBody</code>）</li></ul></li></ul></li><li><p><code>AbstractDispatcherServletInitializer</code>类是SpringMVC提供的快速初始化<code>Web3.0</code>的容器的抽象类</p></li><li><p><code>AbstractDispatcherServletInitializer</code>提供三个接口方法供用户实现</p><ul><li><p><code>createServletApplicationContext()</code>方法：</p><ul><li>创建Servlet容器时，加载SpringMVC对应的bean并放入<code>WebApplicationContext</code>对象范围中，而<code>WebApplicationContext</code>的作用范围为<code>ServletContext</code>范围，即整个Web容器范围</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigWebApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringMvcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>getServletMappings()</code>方法：</p><ul><li>设定SpringMVC对应的请求映射路径，设置为<code>/</code>代表拦截所有请求，任意请求都转入到SpringMVC进行处理</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>createRootApplicationContext()</code>方法：</p><ul><li>如果创建Servlet容器时需要加载非SpringMVC对应的bean，使用当前方法进行，使用方式同<code>createServletApplicationContext()</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigWebApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="入门案例工作流程分析" tabindex="-1"><a class="header-anchor" href="#入门案例工作流程分析" aria-hidden="true">#</a> 入门案例工作流程分析</h3><h4 id="容器初始化过程" tabindex="-1"><a class="header-anchor" href="#容器初始化过程" aria-hidden="true">#</a> 容器初始化过程</h4><ul><li>服务器启动，执行<code>ServletContainersInitConfig</code>类, 初始化web容器</li><li>执行<code>createServletApplicationContext</code>方法, 创建了<code>WebApplicationContext</code>对象</li><li>加载<code>springMvcConfig</code></li><li>执行<code>@ComponentScan</code>加载对应的bean</li><li>加载<code>UserController</code>, 每个<code>@RequestMapping</code>的名称对应一个具体的方法</li><li>执行<code>getServletMappings</code>方法, 定义所有的请求都通过SpringMVC</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326104211219.png" alt="image-20230325212121106" tabindex="0" loading="lazy"><figcaption>image-20230325212121106</figcaption></figure><h4 id="单次请求过程" tabindex="-1"><a class="header-anchor" href="#单次请求过程" aria-hidden="true">#</a> 单次请求过程</h4><ul><li>发送请求<code>localhost/save</code></li><li>web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理</li><li>解析请求路径<code>/save</code></li><li>由<code>/save</code>匹配执行对应的方法<code>save()</code></li><li>执行<code>save()</code></li><li>检测到有<code>@ResponseBody</code>直接将<code>save()</code>方法的返回值作为响应体返回给请求方</li></ul><h3 id="bean加载控制" tabindex="-1"><a class="header-anchor" href="#bean加载控制" aria-hidden="true">#</a> bean加载控制</h3><ul><li>SpringMVC相关bean（表现层）</li><li>Spring相关bean <ul><li>业务bean（Service）</li><li>功能bean（DataSource等）</li></ul></li><li>SpringMVC相关bean加载控制 <ul><li>SpringMVC加载的bean对应包均在<code>com.LGYNB.controller</code>中</li></ul></li><li>Spring相关bean加载控制 <ul><li>方式一：Sprig加载的bean设定扫描范围为<code>com.LGYNB</code>，排除吊<code>controller</code>包中的bean</li><li>方式二：Sprig加载的bean设定扫描范围为精准范围</li><li>方式三：不区分SpringMVC和Spring的环境，加载到同一个环境中</li></ul></li><li><code>@ComponentScan</code></li></ul><table><thead><tr><th>名称</th><th>类型</th><th>属性</th><th></th></tr></thead><tbody><tr><td><code>@ComponentScan</code></td><td>类注解</td><td><code>excludeFilters</code><br><code>includeFilters</code></td><td>排除扫描路径中加载的bean，需要指定类别（type）与具体项（classes）<br>加载指定的bean，需要指定类别（type）与具体项（classes）</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>
    value<span class="token operator">=</span><span class="token string">&quot;com.LGYNB&quot;</span><span class="token punctuation">,</span>
    excludeFilters <span class="token operator">=</span> <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>
        type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span>
        classes <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bean的加载格式" tabindex="-1"><a class="header-anchor" href="#bean的加载格式" aria-hidden="true">#</a> bean的加载格式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContainersInitConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDispatcherServletInitializer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载SpringMVC容器配置</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigWebApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringMvcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置哪些请求归属SpringMVC处理</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 加载spring容器配置</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigWebApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="简化开发" tabindex="-1"><a class="header-anchor" href="#简化开发" aria-hidden="true">#</a> 简化开发</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContainersInitConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载Spring容器配置</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 加载SpringMVC容器配置</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">SpringMvcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 设置哪些请求归属SpringMVC处理</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postman" tabindex="-1"><a class="header-anchor" href="#postman" aria-hidden="true">#</a> PostMan</h3><ul><li>Postman是一款网页调试与发送网页HTTP请求的Chrome插件</li><li>作用：常用于进行接口调试</li><li>使用步骤 <ul><li>注册登录</li><li>创建/进入工作空间</li><li>发送请求测试结果</li></ul></li></ul><h2 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h2><h3 id="请求映射路径" tabindex="-1"><a class="header-anchor" href="#请求映射路径" aria-hidden="true">#</a> 请求映射路径</h3><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th></tr></thead><tbody><tr><td><code>@RequestMapping</code></td><td>类/方法注解</td><td>SpringMVC控制器上方或其方法定义上方</td><td>设置当前控制器方法请求访问路径，如果设置在类上则表示统一设置当前控制器方法请求访问路径前缀</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// http://localhost/user/save</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get请求" tabindex="-1"><a class="header-anchor" href="#get请求" aria-hidden="true">#</a> GET请求</h3><ul><li><strong>普通参数</strong>：url地址传参，地址参数名和形参变量名相同，定义形参即可接收参数</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230325190215013.png" alt="image-20230326102226628" tabindex="0" loading="lazy"><figcaption>image-20230326102226628</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comomnParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comomnParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求" aria-hidden="true">#</a> POST请求</h3><ul><li>普通参数：form表单post请求传参，表单参数名和形参变量名相同，定义形参即可接收参数</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326104519735.png" alt="image-20230326102321600" tabindex="0" loading="lazy"><figcaption>image-20230326102321600</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 跟GET请求的形式一样</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comomnParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comomnParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>POST中文乱码</strong>处理 <ul><li>为web容器添加过滤器并指定字符集，Spring-web包中提供了专用的字符过滤器</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 乱码处理</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CharacterEncodingFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>filter<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求参数" tabindex="-1"><a class="header-anchor" href="#请求参数" aria-hidden="true">#</a> 请求参数</h3><h4 id="普通参数" tabindex="-1"><a class="header-anchor" href="#普通参数" aria-hidden="true">#</a> <strong>普通参数</strong></h4><ul><li>url地址传参，地址参数名和形参变量名相同，定义形参即可接收参数 <ul><li>若请求参数名与形参变量名不同，使用<code>@RequestParam</code>绑定参数关系</li></ul></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230325190215013.png" alt="image-20230326102226628" tabindex="0" loading="lazy"><figcaption>image-20230326102226628</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comomnParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comomnParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td><code>@RequestParam</code></td><td>形参注解</td><td>SpringMVC控制器方法形参定义前面</td><td>绑定请求参数与处理器方法形参间的关系</td><td><code>required</code>：是否为必传参数<br><code>default</code>：参数默认值</td></tr></tbody></table><h4 id="pojo参数" tabindex="-1"><a class="header-anchor" href="#pojo参数" aria-hidden="true">#</a> POJO参数</h4><ul><li>请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326155054501.png" alt="image-20230326104211219" tabindex="0" loading="lazy"><figcaption>image-20230326104211219</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    ……
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comomnParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comomnParam</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="嵌套pojo参数" tabindex="-1"><a class="header-anchor" href="#嵌套pojo参数" aria-hidden="true">#</a> <strong>嵌套POJO参数</strong></h4><ul><li>POJO对象中包含POJO对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> addr<span class="token punctuation">;</span>
    ……
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326105019092.png" alt="image-20230326104519735" tabindex="0" loading="lazy"><figcaption>image-20230326104519735</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comomnParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comomnParam</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组参数" tabindex="-1"><a class="header-anchor" href="#数组参数" aria-hidden="true">#</a> <strong>数组参数</strong></h4><ul><li>请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326160317651.png" alt="image-20230326104650444" tabindex="0" loading="lazy"><figcaption>image-20230326104650444</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comomnParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comomnParam</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> likes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>likes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="集合保存普通参数" tabindex="-1"><a class="header-anchor" href="#集合保存普通参数" aria-hidden="true">#</a> 集合保存普通参数</h4><ul><li>请求参数名与形参集合对象名相同且请求参数为多个，<code>@RequestParam</code>绑定参数关系</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326104650444.png" alt="image-20230326105019092" tabindex="0" loading="lazy"><figcaption>image-20230326105019092</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/comomnParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">comomnParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> likes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>likes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传递json数据" tabindex="-1"><a class="header-anchor" href="#传递json数据" aria-hidden="true">#</a> 传递JSON数据</h3><h4 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h4><ul><li>导入坐标</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置发送JSON数据（请求body中添加JSON数据）</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230325190645328.png" alt="image-20230326155054501" tabindex="0" loading="lazy"><figcaption>image-20230326155054501</figcaption></figure><ul><li>开启自动转换JSON数据的支持(<code>@EnableWebMvc</code>) <ul><li><code>@EnableWebMvc</code>功能强大，该注解整合了多个功能，此处仅用其中一部分功能，即JSON数据进行自动类型转换</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.LGYNB.controller&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置接收JSON数据</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/paramForJson&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paramForJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> param<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关键注解</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th></tr></thead><tbody><tr><td><code>@EnableWebMvc</code></td><td>配置类注解</td><td>SpringMVC配置类上方</td><td>开启SpringMVC多项辅助功能</td></tr><tr><td><code>@RequestBody</code></td><td>形参注解</td><td>SpringMVC控制器方法形参定义前面</td><td>将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</td></tr></tbody></table><h4 id="json数组" tabindex="-1"><a class="header-anchor" href="#json数组" aria-hidden="true">#</a> JSON数组</h4><ul><li>JSON数据为数组格式，定义集合类型可接收参数</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230325190645328.png" alt="image-20230326155054501" tabindex="0" loading="lazy"><figcaption>image-20230326155054501</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/paramForJson&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paramForJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> likes<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>likes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="json对象-pojo" tabindex="-1"><a class="header-anchor" href="#json对象-pojo" aria-hidden="true">#</a> JSON对象（POJO）</h4><ul><li>JSON数据与形参对象属性名相同， 定义POJO类型形参即可接收参数</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329223755587.png" alt="image-20230326160250036" tabindex="0" loading="lazy"><figcaption>image-20230326160250036</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/paramForJson&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paramForJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="json数组-pojo" tabindex="-1"><a class="header-anchor" href="#json数组-pojo" aria-hidden="true">#</a> JSON数组（POJO）</h4><ul><li>JSON数组数据与集合泛型属性名相同，定义list类型形参即可接收参数</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230326160250036.png" alt="image-20230326160317651" tabindex="0" loading="lazy"><figcaption>image-20230326160317651</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/paramForJson&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paramForJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="两个注解的区别" tabindex="-1"><a class="header-anchor" href="#两个注解的区别" aria-hidden="true">#</a> 两个注解的区别</h4><ul><li><p><code>@RequestParam</code>用于接收url地址传参，表单传参<code>[application/x-www-form-urlencoded]</code></p></li><li><p><code>@RequestBody</code>用于接收JSON数据<code>[application/json]</code></p></li><li><p>应用</p><ul><li>后期开发中，发送JSON格式数据为主，<code>@RequestBody</code>应用范围较广</li><li>如果发送非JSON格式数据，选用<code>@RequestParam</code>接收请求参数</li></ul></li></ul><h3 id="日期类型的参数传递" tabindex="-1"><a class="header-anchor" href="#日期类型的参数传递" aria-hidden="true">#</a> 日期类型的参数传递</h3><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th><th>属性</th></tr></thead><tbody><tr><td><code>@DateTimeFormat</code></td><td>形参注解</td><td>SpringMVC控制器方法形参前面</td><td>设定日期时间型数据的格式</td><td><code>pattern</code>：格式字符串</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dataParam&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dataParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应" tabindex="-1"><a class="header-anchor" href="#响应" aria-hidden="true">#</a> 响应</h2><h3 id="响应页面" tabindex="-1"><a class="header-anchor" href="#响应页面" aria-hidden="true">#</a> 响应页面</h3><ul><li>在不加<code>@ResponseBody</code>的情况下直接<code>return 页面.html</code></li></ul><h3 id="响应文本数据" tabindex="-1"><a class="header-anchor" href="#响应文本数据" aria-hidden="true">#</a> 响应文本数据</h3><ul><li>加上<code>@ResponseBody</code>，<code>return &quot;字符串内容&quot;</code></li></ul><h3 id="响应json数据" tabindex="-1"><a class="header-anchor" href="#响应json数据" aria-hidden="true">#</a> 响应JSON数据</h3><h4 id="对象转json" tabindex="-1"><a class="header-anchor" href="#对象转json" aria-hidden="true">#</a> 对象转JSON</h4><ul><li>加上<code>@ResponseBody</code>，返回值改成POJO对象，<code>return pojo</code></li></ul><h4 id="对象集合转json数组" tabindex="-1"><a class="header-anchor" href="#对象集合转json数组" aria-hidden="true">#</a> 对象集合转JSON数组</h4><ul><li>加上<code>@ResponseBody</code>，返回值改成<code>List&lt;pojo&gt;</code>，<code>return pojoList</code></li></ul><h3 id="关键注解" tabindex="-1"><a class="header-anchor" href="#关键注解" aria-hidden="true">#</a> 关键注解</h3><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th></tr></thead><tbody><tr><td><code>@ResponseBody</code></td><td>方法注解</td><td>SpringMVC控制器方法定义上方</td><td>设置当前控制器返回值作为响应体</td></tr></tbody></table><h2 id="rest" tabindex="-1"><a class="header-anchor" href="#rest" aria-hidden="true">#</a> REST</h2><h3 id="rest简介" tabindex="-1"><a class="header-anchor" href="#rest简介" aria-hidden="true">#</a> REST简介</h3><ul><li>REST（<strong>R</strong>epresentational <strong>S</strong>tate <strong>T</strong>ransfer）：表现形式转换</li><li>传统风格资源描述形式 <ul><li><code>http://localhost/user/getById?id=1</code></li><li><code>http://localhost/user/saveUser</code></li></ul></li><li>REST风格资源描述形式 <ul><li><code>http://localhost/users/1</code></li><li><code>http://localhost/users</code></li></ul></li><li>优点 <ul><li>隐藏资源，无法通过地址得知资源是何种操作</li><li>书写简化</li></ul></li><li>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</li></ul><table><thead><tr><th>url</th><th>行为动作</th><th>操作</th></tr></thead><tbody><tr><td><code>http://localhost/users</code></td><td>GET（查询）</td><td>查询全部用户信息</td></tr><tr><td><code>http://localhost/users/1</code></td><td>GET（查询）</td><td>查询指定用户信息</td></tr><tr><td><code>http://localhost/users</code></td><td>POST（新增/保存）</td><td>添加用户信息</td></tr><tr><td><code>http://localhost/users</code></td><td>PUT（修改/更新）</td><td>修改用户信息</td></tr><tr><td><code>http://localhost/users/1</code></td><td>DELETE（删除）</td><td>删除用户信息</td></tr></tbody></table><ul><li><p>上述行为是约定方式，约定不是规范，可以打破，所以称为REST风格，而不是REST规范</p></li><li><p>描述模块的名称通常使用复数，表示此类资源</p></li><li><p>根据REST风格对资源进行访问称为RESTful</p></li><li><p>使用步骤</p><ul><li>设定http请求动作<code>method = RequestMethod.请求动作</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设定请求参数（路径变量）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/users/{id}&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关键注解</p></li></ul><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th><th>属性</th></tr></thead><tbody><tr><td><code>@RequestMapping</code></td><td>方法注解</td><td>SpringMVC控制器方法上方</td><td>设置当前控制器方法请求访问路径</td><td><code>value</code>（默认）：请求访问路径<br><code>method</code>：http请求动作（GET/POST/PUT/DELETE）</td></tr><tr><td><code>@PathVariable</code></td><td>形参注解</td><td>SpringMVC控制器方法形参定义前面</td><td>绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</td><td></td></tr></tbody></table><h3 id="接收参数的注解" tabindex="-1"><a class="header-anchor" href="#接收参数的注解" aria-hidden="true">#</a> 接收参数的注解</h3><ul><li><p><code>@RequestBody</code>，<code>@RequestParam</code>，<code>@PathVariable</code></p><ul><li><code>@RequestParam</code>用于接收url地址传参或表单传参</li><li><code>@RequestBody</code>用于接收JSON数据</li><li><code>@PathVariable</code>用于接收路径参数，使用<code>{参数名称}</code>描述路径参数</li></ul></li><li><p>应用</p><ul><li>后期开发中，发送请求参数超过一个时，以JSON格式为主，<code>@RequestBody</code>应用范围较广</li><li>如果发送非JSON数据，选用<code>@RequestParam</code>，用得少</li><li>采用<code>RESTful</code>开发，当参数数量较少时，可以采用<code>@PathVariable</code>接收请求路径变量，通常用于传递id值</li></ul></li></ul><h3 id="rest简化开发" tabindex="-1"><a class="header-anchor" href="#rest简化开发" aria-hidden="true">#</a> REST简化开发</h3><ul><li>关键注解</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th><th>属性</th></tr></thead><tbody><tr><td><code>@RestController</code></td><td>类注解</td><td>基于SpringMVC的RESTful开发控制器类定义上方</td><td>设置当前控制器为RESTful风格，等同于<code>@Controller</code>和<code>@ResponseBody</code>两个注解组合功能</td><td></td></tr><tr><td><code>@GetMapping</code><br><code>@PostMapping</code><br><code>@PutMapping</code><br><code>@DeleteMapping</code></td><td>方法注解</td><td>基于SpringMVC的RESTful开发控制器方法定义上方</td><td>设置当前控制器方法请求访问路径和请求动作，每种对应一个请求动作</td><td><code>Value</code>（默认）：请求访问路径</td></tr></tbody></table><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><ul><li>制作SpringMVC控制器，并通过PostMan测试接口功能</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置对静态资源的访问放行</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcSupport</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 放行非SpringMVC的请求,当访问/page/??的时候，走/pages目录下的内容</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/pages/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;/pages/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;/js/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;/css/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/plugins/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;/plugins/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>前端页面通过异步提交访问后台控制器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>                <span class="token comment">//添加</span>
                <span class="token function">saveBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>

                <span class="token comment">//主页列表查询</span>
                <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>dataList <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ssm整合" tabindex="-1"><a class="header-anchor" href="#ssm整合" aria-hidden="true">#</a> SSM整合</h2><h3 id="ssm整合简介" tabindex="-1"><a class="header-anchor" href="#ssm整合简介" aria-hidden="true">#</a> SSM整合简介</h3><ul><li>创建工程</li><li>SSM整合 <ul><li>Spring <ul><li>SpringConfig</li></ul></li><li>MyBatis <ul><li>MyBatisConfig</li><li>JdbcConfig</li><li>jdbc.properties</li></ul></li><li>SpringMVC <ul><li>ServletConfig</li><li>SpringMvcConfig</li></ul></li></ul></li><li>功能模块 <ul><li>表与实体类</li><li>dao（接口 + 自动代理）</li><li>service（接口 + 实现类） <ul><li>业务层接口测试（整合Junit）</li></ul></li><li>controller <ul><li>表现层接口测试（PostMan）</li></ul></li></ul></li></ul><h3 id="spring整合mybatis" tabindex="-1"><a class="header-anchor" href="#spring整合mybatis" aria-hidden="true">#</a> Spring整合MyBatis</h3><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h4><h5 id="springconfig" tabindex="-1"><a class="header-anchor" href="#springconfig" aria-hidden="true">#</a> <strong>SpringConfig</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329223817160.png" alt="image-20230329223755587" tabindex="0" loading="lazy"><figcaption>image-20230329223755587</figcaption></figure><h5 id="jdbc-properties" tabindex="-1"><a class="header-anchor" href="#jdbc-properties" aria-hidden="true">#</a> <strong>jdbc.properties</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329223835341.png" alt="image-20230329223835341" tabindex="0" loading="lazy"><figcaption>image-20230329223835341</figcaption></figure><h5 id="jdbcconfig" tabindex="-1"><a class="header-anchor" href="#jdbcconfig" aria-hidden="true">#</a> <strong>JdbcConfig</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329223939614.png" alt="image-20230329223817160" tabindex="0" loading="lazy"><figcaption>image-20230329223817160</figcaption></figure><h5 id="mybatisconfig" tabindex="-1"><a class="header-anchor" href="#mybatisconfig" aria-hidden="true">#</a> <strong>MyBatisConfig</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224040949.png" alt="image-20230329223917735" tabindex="0" loading="lazy"><figcaption>image-20230329223917735</figcaption></figure><h4 id="模型" tabindex="-1"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h4><h5 id="book" tabindex="-1"><a class="header-anchor" href="#book" aria-hidden="true">#</a> <strong>Book</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329223917735.png" alt="image-20230329223939614" tabindex="0" loading="lazy"><figcaption>image-20230329223939614</figcaption></figure><h4 id="数据层标准开发" tabindex="-1"><a class="header-anchor" href="#数据层标准开发" aria-hidden="true">#</a> 数据层标准开发</h4><h5 id="bookdao" tabindex="-1"><a class="header-anchor" href="#bookdao" aria-hidden="true">#</a> <strong>BookDao</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224010043.png" alt="image-20230329224010043" tabindex="0" loading="lazy"><figcaption>image-20230329224010043</figcaption></figure><h4 id="业务层标准开发" tabindex="-1"><a class="header-anchor" href="#业务层标准开发" aria-hidden="true">#</a> 业务层标准开发</h4><h5 id="bookservice" tabindex="-1"><a class="header-anchor" href="#bookservice" aria-hidden="true">#</a> <strong>BookService</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224620537.png" alt="image-20230329224040949" tabindex="0" loading="lazy"><figcaption>image-20230329224040949</figcaption></figure><h5 id="bookserviceimpl" tabindex="-1"><a class="header-anchor" href="#bookserviceimpl" aria-hidden="true">#</a> <strong>BookServiceImpl</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224551560.png" alt="image-20230329224059322" tabindex="0" loading="lazy"><figcaption>image-20230329224059322</figcaption></figure><h4 id="测试接口" tabindex="-1"><a class="header-anchor" href="#测试接口" aria-hidden="true">#</a> 测试接口</h4><h5 id="bookservicetest" tabindex="-1"><a class="header-anchor" href="#bookservicetest" aria-hidden="true">#</a> <strong>BookServiceTest</strong></h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224059322.png" alt="image-20230329224120649" tabindex="0" loading="lazy"><figcaption>image-20230329224120649</figcaption></figure><h4 id="事务处理" tabindex="-1"><a class="header-anchor" href="#事务处理" aria-hidden="true">#</a> 事务处理</h4><h5 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional" aria-hidden="true">#</a> Transactional</h5><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224455173.png" alt="image-20230329224455173" tabindex="0" loading="lazy"><figcaption>image-20230329224455173</figcaption></figure><h3 id="spring整合springmvc" tabindex="-1"><a class="header-anchor" href="#spring整合springmvc" aria-hidden="true">#</a> Spring整合SpringMVC</h3><h4 id="web配置类" tabindex="-1"><a class="header-anchor" href="#web配置类" aria-hidden="true">#</a> web配置类</h4><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224120649.png" alt="image-20230329224551560" tabindex="0" loading="lazy"><figcaption>image-20230329224551560</figcaption></figure><h4 id="springmvc配置类" tabindex="-1"><a class="header-anchor" href="#springmvc配置类" aria-hidden="true">#</a> SpringMVC配置类</h4><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224745357.png" alt="image-20230329224620537" tabindex="0" loading="lazy"><figcaption>image-20230329224620537</figcaption></figure><h4 id="基于restful的controller开发" tabindex="-1"><a class="header-anchor" href="#基于restful的controller开发" aria-hidden="true">#</a> 基于RESTful的Controller开发</h4><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224644677.png" alt="image-20230329224644677" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230329224723165.png" alt="image-20230329224745357" loading="lazy"></p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330160756408.png" alt="image-20230329224723165" tabindex="0" loading="lazy"><figcaption>image-20230329224723165</figcaption></figure><h3 id="表现层数据封装" tabindex="-1"><a class="header-anchor" href="#表现层数据封装" aria-hidden="true">#</a> 表现层数据封装</h3><h4 id="设置统一数据返回结果类" tabindex="-1"><a class="header-anchor" href="#设置统一数据返回结果类" aria-hidden="true">#</a> 设置统一数据返回结果类</h4><ul><li>Result 类中的字段并不是固定的，可以根据需要自行增减</li><li>提供若干个构造方法，方便操作</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置统一数据返回结果" tabindex="-1"><a class="header-anchor" href="#设置统一数据返回结果" aria-hidden="true">#</a> 设置统一数据返回结果</h4><ul><li>Code 类的常量设计也不是固定的，可以根据需要自行增减，例如：对查询进行细分：<code>GET_OK</code>, <code>GET_PAGE_OK</code>, <code>GET_ALL_OK</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">SAVE_OK</span> <span class="token operator">=</span> <span class="token number">20011</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">DELETE_OK</span> <span class="token operator">=</span> <span class="token number">20021</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">UPDATE_OK</span> <span class="token operator">=</span> <span class="token number">20031</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">GET_OK</span> <span class="token operator">=</span> <span class="token number">20041</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">SAVE_ERR</span> <span class="token operator">=</span> <span class="token number">20010</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">DELETE_ERR</span> <span class="token operator">=</span> <span class="token number">20020</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">UPDATE_ERR</span> <span class="token operator">=</span> <span class="token number">20030</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> <span class="token constant">GET_ERR</span> <span class="token operator">=</span> <span class="token number">20040</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="根据实际情况设定合理的result" tabindex="-1"><a class="header-anchor" href="#根据实际情况设定合理的result" aria-hidden="true">#</a> 根据实际情况设定合理的Result</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>flag <span class="token operator">?</span> <span class="token class-name">Code</span><span class="token punctuation">.</span><span class="token constant">SAVE_OK</span> <span class="token operator">:</span> <span class="token class-name">Code</span><span class="token punctuation">.</span><span class="token constant">SAVE_ERR</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Book</span> book <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> code <span class="token operator">=</span> book <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Code</span><span class="token punctuation">.</span><span class="token constant">GET_OK</span> <span class="token operator">:</span> <span class="token class-name">Code</span><span class="token punctuation">.</span><span class="token constant">GET_ERR</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> msg <span class="token operator">=</span> book <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;数据查询失败，请重试&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> book<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常处理器" tabindex="-1"><a class="header-anchor" href="#异常处理器" aria-hidden="true">#</a> 异常处理器</h3><h4 id="出现异常的常见诱因" tabindex="-1"><a class="header-anchor" href="#出现异常的常见诱因" aria-hidden="true">#</a> 出现异常的常见诱因</h4><ul><li>框架内部抛出的异常：因使用不合规导致</li><li>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</li><li>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历业务书写操作，导致索引异常等</li><li>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</li><li>工具类抛出的异常：因工具类书写不严谨不够健壮导致（例如：必要释放的连接长期未释放）</li></ul><h4 id="异常处理器-1" tabindex="-1"><a class="header-anchor" href="#异常处理器-1" aria-hidden="true">#</a> 异常处理器</h4><ul><li>集中的，统一的处理项目中出现的异常</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProjectExceptionAdvice</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">doException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 处理异常</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关键注解-1" tabindex="-1"><a class="header-anchor" href="#关键注解-1" aria-hidden="true">#</a> 关键注解</h4><table><thead><tr><th>名称</th><th>类型</th><th>位置</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>@RestControllerAdvice</code></td><td>类注解</td><td>Rest风格开发的控制器增强类定义上面</td><td>为Rest风格开发的控制器类做增强</td><td><code>@RestControllerAdvice</code>自带<code>@Component</code>注解，具备对应的功能</td></tr><tr><td><code>@ExceptionHandler</code></td><td>方法注解</td><td>专用于异常处理的控制器方法上方</td><td>设置指定一场的处理方案，功能等同于控制器方法，出现异常后终止原始控制器执行，并转入当前方法执行</td><td>此类方法可以根据处理的异常的不同，制作多个方法分别处理对应的异常</td></tr></tbody></table><h3 id="项目异常处理方案" tabindex="-1"><a class="header-anchor" href="#项目异常处理方案" aria-hidden="true">#</a> 项目异常处理方案</h3><h4 id="项目异常分类" tabindex="-1"><a class="header-anchor" href="#项目异常分类" aria-hidden="true">#</a> 项目异常分类</h4><ul><li><p>业务异常</p><ul><li>规范的用户行为产生的异常</li><li>不规范的用户行为产生的异常</li></ul></li><li><p>系统异常</p><ul><li>项目运行过程中可预计且无法避免的异常</li></ul></li><li><p>其他异常</p><ul><li>编程人员未预期的异常</li></ul></li></ul><h4 id="处理方案" tabindex="-1"><a class="header-anchor" href="#处理方案" aria-hidden="true">#</a> 处理方案</h4><ul><li><p>业务异常</p><ul><li>发送对应信息传递给用户，提醒规范操作</li></ul></li><li><p>系统异常</p><ul><li>发送固定信息传递给用户，安抚用户</li><li>发送特定信息给运维人员，提醒维护</li><li>记录日志</li></ul></li><li><p>其他异常</p><ul><li>发送固定信息传递给用户，安抚用户</li><li>发送特定信息给运维人员，提醒维护（纳入预期范围）</li><li>记录日志</li></ul></li></ul><h4 id="处理步骤" tabindex="-1"><a class="header-anchor" href="#处理步骤" aria-hidden="true">#</a> 处理步骤</h4><ul><li>自定义项目系统级异常</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330160811125.png" alt="image-20230330160756408" tabindex="0" loading="lazy"><figcaption>image-20230330160756408</figcaption></figure><ul><li>自定义项目业务级异常</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330160827763.png" alt="image-20230330160811125" tabindex="0" loading="lazy"><figcaption>image-20230330160811125</figcaption></figure><ul><li>自定义异常编码（持续补充）</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330160917356.png" alt="image-20230330160827763" tabindex="0" loading="lazy"><figcaption>image-20230330160827763</figcaption></figure><ul><li>触发自定义异常</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330213055251.png" alt="image-20230330160917356" tabindex="0" loading="lazy"><figcaption>image-20230330160917356</figcaption></figure><ul><li>拦截并处理异常</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330160944595.png" alt="image-20230330160944595" tabindex="0" loading="lazy"><figcaption>image-20230330160944595</figcaption></figure><h2 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h2><h3 id="拦截器概念" tabindex="-1"><a class="header-anchor" href="#拦截器概念" aria-hidden="true">#</a> 拦截器概念</h3><ul><li>拦截器（Interceptor）：是一种动态拦截方法调用的机制</li><li>作用 <ul><li>在指定方法调用的前后执行预先设定好的代码</li><li>阻止原始方法的执行</li></ul></li><li>拦截器与过滤器的区别 <ul><li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li><li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅对SpringMVC的访问进行增强</li></ul></li></ul><h3 id="拦截器使用步骤" tabindex="-1"><a class="header-anchor" href="#拦截器使用步骤" aria-hidden="true">#</a> 拦截器使用步骤</h3><ul><li>声明拦截器的bean，并实现<code>HandlerInterceptor</code>接口（注意：扫描加载bean）</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330213015506.png" alt="image-20230330212925053" tabindex="0" loading="lazy"><figcaption>image-20230330212925053</figcaption></figure><ul><li>定义配置类，继承<code>WebMvcCOnfigurationSupport</code>，实现<code>addInterceptor</code>方法（注意：扫描加载配置）</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330212925053.png" alt="image-20230330213015506" tabindex="0" loading="lazy"><figcaption>image-20230330213015506</figcaption></figure><ul><li>添加拦截器并设定拦截的访问路径，路径可以通过可变参数设置多个</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330215220664.png" alt="image-20230330213055251" tabindex="0" loading="lazy"><figcaption>image-20230330213055251</figcaption></figure><ul><li>使用标准接口<code>WebMvcConfigurer</code>简化开发（注意：侵入性较强）</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330213442419.png" alt="image-20230330213328390" tabindex="0" loading="lazy"><figcaption>image-20230330213328390</figcaption></figure><h3 id="拦截器执行流程" tabindex="-1"><a class="header-anchor" href="#拦截器执行流程" aria-hidden="true">#</a> 拦截器执行流程</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330213328390.png" alt="image-20230330213442419" tabindex="0" loading="lazy"><figcaption>image-20230330213442419</figcaption></figure><h3 id="拦截器参数" tabindex="-1"><a class="header-anchor" href="#拦截器参数" aria-hidden="true">#</a> 拦截器参数</h3><h4 id="前置处理" tabindex="-1"><a class="header-anchor" href="#前置处理" aria-hidden="true">#</a> 前置处理</h4><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330215438780.png" alt="image-20230330215220664" tabindex="0" loading="lazy"><figcaption>image-20230330215220664</figcaption></figure><ul><li>参数 <ul><li><code>request</code>：请求对象</li><li><code>response</code>：响应对象</li><li><code>handler</code>：被调用的处理器对象，本质上是一个方法对象，对反射技术中<code>Method</code>对象进行了再包装</li></ul></li><li>返回值 <ul><li>false：拦截</li><li>true：放行</li></ul></li></ul><h4 id="后置处理" tabindex="-1"><a class="header-anchor" href="#后置处理" aria-hidden="true">#</a> 后置处理</h4><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330220045478.png" alt="image-20230330215438780" tabindex="0" loading="lazy"><figcaption>image-20230330215438780</figcaption></figure><ul><li>参数 <ul><li><code>modelAndView</code>：如果处理器执行完成具有返回效果，可以读取到相应数据与页面信息，并进行调整</li></ul></li></ul><h4 id="完成后处理" tabindex="-1"><a class="header-anchor" href="#完成后处理" aria-hidden="true">#</a> 完成后处理</h4><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330215532686.png" alt="image-20230330215532686" tabindex="0" loading="lazy"><figcaption>image-20230330215532686</figcaption></figure><ul><li>参数 <ul><li><code>ex</code>：如果处理器执行过程中出现异常对象，可以针对异常对象进行单独处理</li></ul></li></ul><h3 id="多拦截器执行顺序" tabindex="-1"><a class="header-anchor" href="#多拦截器执行顺序" aria-hidden="true">#</a> 多拦截器执行顺序</h3><ul><li>当配置多个拦截器时，形成拦截器链</li><li>拦截器链的运行顺序参照拦截器添加顺序为准</li><li>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行</li><li>当拦截器运行中断，仅运行配置在前面的拦截器<code>afterCompletion</code>操作</li></ul><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230330220039227.png" alt="image-20230330220039227" loading="lazy"> <img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230324113014206.png" alt="image-20230330220045478" loading="lazy"></p>`,227),p=[i];function o(c,l){return a(),s("div",null,p)}const r=n(e,[["render",o],["__file","SpringMVC.html.vue"]]);export{r as default};
