import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-OTaO6_y0.js";const t={},o=p(`<h1 id="计算机视觉基础" tabindex="-1"><a class="header-anchor" href="#计算机视觉基础" aria-hidden="true">#</a> 计算机视觉基础</h1><h2 id="cnn基础" tabindex="-1"><a class="header-anchor" href="#cnn基础" aria-hidden="true">#</a> CNN基础</h2><ul><li><p>卷积神经网络主要应用于计算机视觉相关任务，但他能处理的任务并不局限于图像，语音识别，文本识别等都可以使用卷积神经网络</p></li><li><p>计算机看到图像时，实际看到的是一大堆像素值</p></li><li><p>计算机可以通过寻找诸如边缘和曲线之类的低级特点来分类图片，继而通过一系列卷积层级建构出更为抽象的概念</p></li><li><p>CNN是从视觉皮层的生物学上获得启发的</p><ul><li>视觉皮层有小部分细胞对特定部分的视觉区域敏感</li><li>一些神经元只对垂直边缘兴奋，另一些对水平或对角边缘兴奋</li></ul></li><li><p>CNN的工作概述</p><ul><li>卷积层 -&gt; 非线性层 -&gt; 池化层（下采样downsampling) -&gt; 全连接层 -&gt; 输出</li><li>输出可以是最好地描述了图像内容的一个单独分类或一组分类的概率</li></ul></li><li><p>卷积完成的是对图像特征的提取或信息匹配</p></li><li><p>当一个包含某些特征的图像经过一个卷积核的时候，一些卷积核被激活，输出特定信号</p></li></ul><h2 id="cnn架构" tabindex="-1"><a class="header-anchor" href="#cnn架构" aria-hidden="true">#</a> CNN架构</h2><ul><li><p>卷积层 -&gt; <code>conv2d</code></p><ul><li><code>ksize</code>：卷积核的大小</li><li><code>strides</code>：卷积核移动的跨度</li><li><code>padding</code>：边缘填充</li></ul></li><li><p>非线性变化层 -&gt; <code>relu/sigmoid/tanh</code></p></li><li><p>池化层 -&gt; <code>pooling2d</code></p><ul><li><code>layers.MaxPooling2D</code> -&gt; 最大池化</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230804195736751.png" alt="image-20230809123906212" tabindex="0" loading="lazy"><figcaption>image-20230809123906212</figcaption></figure></li><li><p>全连接层 -&gt; <code>w*x + b</code></p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810133112405.png" alt="image-20230809124005902" tabindex="0" loading="lazy"><figcaption>image-20230809124005902</figcaption></figure><h2 id="四种天气图片分类案例" tabindex="-1"><a class="header-anchor" href="#四种天气图片分类案例" aria-hidden="true">#</a> 四种天气图片分类案例</h2><h3 id="数据集预处理" tabindex="-1"><a class="header-anchor" href="#数据集预处理" aria-hidden="true">#</a> 数据集预处理</h3><ul><li>将一个散乱的图片文件夹整理成按训练集和验证集且按标签分类的多级文件夹</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>base_dir <span class="token operator">=</span> <span class="token string">r&#39;./data/4weather&#39;</span>
img_dir <span class="token operator">=</span> <span class="token string">r&#39;./data/4weather_imgs&#39;</span>
specises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cloudy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;rain&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;shine&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;sunrise&#39;</span><span class="token punctuation">]</span>
train_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">&#39;train&#39;</span><span class="token punctuation">)</span>
test_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>base_dir<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 判断是否有数据集文件夹，没有则创建</span>
    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>base_dir<span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>train_dir<span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>test_dir<span class="token punctuation">)</span>
    <span class="token keyword">for</span> train_or_test <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;train&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 循环在训练集和验证集中创建四种类型的文件夹</span>
        <span class="token keyword">for</span> spec <span class="token keyword">in</span> specises<span class="token punctuation">:</span>
            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> train_or_test<span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i<span class="token punctuation">,</span> img <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>img_dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 将图片根据类别分别搬运到训练集和验证集文件夹中</span>
    <span class="token keyword">for</span> spec <span class="token keyword">in</span> specises<span class="token punctuation">:</span>
        <span class="token keyword">if</span> spec <span class="token keyword">in</span> img<span class="token punctuation">:</span>
            src <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_dir<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token comment"># 原始目录</span>
            <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                des <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> spec<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token comment"># test目标目录</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                des <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">&#39;train&#39;</span><span class="token punctuation">,</span> spec<span class="token punctuation">,</span> img<span class="token punctuation">)</span> <span class="token comment"># train目标目录</span>
            shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>src<span class="token punctuation">,</span> des<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>利用分完类的多级文件夹创建dataloader</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 初始化转换器</span>
transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span> 
    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 将大小不一的图片重置为96*96的尺寸</span>
    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 将图片数据转换为tensor</span>
    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 标准化（均值，方差）</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 从文件夹中读取数据集</span>
train_ds <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>train_dir<span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span>
test_ds <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>test_dir<span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span>
<span class="token comment"># 创建dataloader</span>
train_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCHSIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCHSIZE<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>train_ds<span class="token punctuation">.</span>class_to_idx <span class="token comment"># 每个类别对应的标签</span>
<span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;cloudy&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;rain&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;shine&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;sunrise&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>预览数据集信息</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>imgs<span class="token punctuation">,</span> labels <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>train_dl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 遍历一个批次的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>imgs<span class="token punctuation">.</span>shape
<span class="token operator">-</span><span class="token operator">&gt;</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>id_to_class <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> train_ds<span class="token punctuation">.</span>class_to_idx<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">&#39;cloudy&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;rain&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;shine&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&#39;sunrise&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 图片和标签预览</span>
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>img<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    img <span class="token operator">=</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>id_to_class<span class="token punctuation">.</span>get<span class="token punctuation">(</span>label<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230809124005902.png" alt="image-20230809195228966" tabindex="0" loading="lazy"><figcaption>image-20230809195228966</figcaption></figure><h3 id="创建模型" tabindex="-1"><a class="header-anchor" href="#创建模型" aria-hidden="true">#</a> 创建模型</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 逐层翻倍的卷积层设计模式</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment"># 全连接层</span>
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token comment"># print(x.size()) -&gt; torch.Size([16, 64, 10, 10])</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型训练" tabindex="-1"><a class="header-anchor" href="#模型训练" aria-hidden="true">#</a> 模型训练</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
opt <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>
epochs <span class="token operator">=</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="训练结果" tabindex="-1"><a class="header-anchor" href="#训练结果" aria-hidden="true">#</a> 训练结果</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> test_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;test_loss&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;train_acc&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;test_acc&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810133600858.png" alt="image-20230810133112405" loading="lazy"> <img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810133123823.png" alt="image-20230810133123823" loading="lazy"></p><ul><li>明显可以看出过拟合了</li></ul><h2 id="dropout" tabindex="-1"><a class="header-anchor" href="#dropout" aria-hidden="true">#</a> Dropout</h2><h3 id="dropout工作原理" tabindex="-1"><a class="header-anchor" href="#dropout工作原理" aria-hidden="true">#</a> Dropout工作原理</h3><ul><li>随机丢弃掉一部分神经元的输出</li><li>让一部分神经元在某次前向传播过程中失能</li><li>每次前向传播所使用到的神经元都是不一样的，也就意味着每次训练都是一个新的模型</li><li>Dropout只在训练过程中有效，预测时会激活全部的神经元</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810133617313.png" alt="image-20230810110042659" tabindex="0" loading="lazy"><figcaption>image-20230810110042659</figcaption></figure><h3 id="解决过拟合的原因" tabindex="-1"><a class="header-anchor" href="#解决过拟合的原因" aria-hidden="true">#</a> 解决过拟合的原因</h3><ul><li>取平均的作用</li><li>减少神经元之间复杂的共适应关系：dropout程序导致两个神经元不一定每次都在一个dropout网络中出现。这样权值的更新不再依赖于有固定关系的隐含节点的共同作用，阻止了某些特征仅仅在其他特定特征下才有效果的情况</li></ul><h3 id="使用dropout层修改模型" tabindex="-1"><a class="header-anchor" href="#使用dropout层修改模型" aria-hidden="true">#</a> 使用dropout层修改模型</h3><ul><li><p><code>model.train()</code>：训练模式</p></li><li><p><code>model.eval()</code>：预测模式</p></li><li><p>这两种模式主要影响<code>dropout</code>层和<code>BN</code>层</p></li><li><p>实现步骤</p><ul><li>在模型中新增drop层</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>drop <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment"># 随机丢弃掉50%的神经元 用于处理全连接层</span>
self<span class="token punctuation">.</span>drop2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout2d<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment"># 用于处理卷积层</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在卷积层和全连接层的后面加上drop层</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop2d<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop2d<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop2d<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810155201484.png" alt="image-20230810133600858" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810155228975.png" alt="image-20230810133617313" loading="lazy"></p><h2 id="批标准化" tabindex="-1"><a class="header-anchor" href="#批标准化" aria-hidden="true">#</a> 批标准化</h2><h3 id="标准化定义" tabindex="-1"><a class="header-anchor" href="#标准化定义" aria-hidden="true">#</a> 标准化定义</h3><ul><li><p>传统机器学习中标准化也叫做归一化</p></li><li><p>一般是将数据映射到指定的范围，用于取出不同维度数据的量纲以及量纲单位</p></li><li><p>数据标准化让机器学习模型看到的不同样本彼此之间更加相似，这有助于模型的学习与对新数据的泛化</p></li><li><p>常见的数据标准化形式：</p><ul><li>归一化：将数据规范到 $[0,1]$</li><li>标准化：将数据减去其平均值使其中心为0，然后将数据除以其标准差使其标准差为1（标准正态分布）</li></ul></li></ul><h3 id="批标准化定义" tabindex="-1"><a class="header-anchor" href="#批标准化定义" aria-hidden="true">#</a> 批标准化定义</h3><ul><li><p>不仅将数据输入模型之前对数据做标准化</p></li><li><p>在网络的每一次变换之后都应该考虑数据标准化</p></li><li><p>批标准化解决的问题是梯度消失和梯度爆炸</p></li><li><p>批标准化是一种训练优化方法</p></li></ul><h3 id="批标准化的好处" tabindex="-1"><a class="header-anchor" href="#批标准化的好处" aria-hidden="true">#</a> 批标准化的好处</h3><ul><li><p>数据预处理做标准化可以加速收敛</p></li><li><p>神经网络使用标准化也可以加速收敛</p></li><li><p>具有正则化的效果（抑制过拟合）</p></li><li><p>提高模型的泛化能力</p></li><li><p>允许更高的学习速率从而加速收敛</p></li><li><p>有利于梯度传播，因此允许更深的网络</p></li><li><p>对于有些特别深的网络，只有包含多个<code>BatchNormalization</code>层时才能训练</p></li><li><p><code>BatchNormalization</code>广泛应用于<code>pytorch</code>内置的许多高级卷积神经网络架构，如<code>ResNet</code>，<code>InceptionV3</code>……</p></li></ul><h3 id="实现批标准化" tabindex="-1"><a class="header-anchor" href="#实现批标准化" aria-hidden="true">#</a> 实现批标准化</h3><ul><li><p><code>BN</code>层通常用在卷积层或密集连接层后</p></li><li><p><code>nn.BatchNorm1d()</code></p></li><li><p><code>nn.BatchNorm2d()</code></p></li></ul><h3 id="批标准化实现过程" tabindex="-1"><a class="header-anchor" href="#批标准化实现过程" aria-hidden="true">#</a> 批标准化实现过程</h3><ol><li>求每一个训练批次数据的均值</li><li>求每一个训练批次数据的方差</li><li>数据进行标准化</li><li>训练参数 γ，β</li><li>输出γ通过γ和β线性变换得到原来的数值</li></ol><ul><li><p>在正向传播中，不会改变当前输出，只记录下γ和β</p></li><li><p>在反向传播中，根据求得的γ和β通过链式求导法则，求出学习速率以至改变权值</p></li><li><p>在预测阶段的均值和方差来源于训练阶段，将训练阶段每个batch的均值和方差求期望值，作为预测阶段BN的均值和方差</p></li></ul><h3 id="批标准化的使用位置" tabindex="-1"><a class="header-anchor" href="#批标准化的使用位置" aria-hidden="true">#</a> 批标准化的使用位置</h3><ul><li>原始论文中提到CNN中一般应作用于非线性激活函数之前</li><li>但实际上放在激活函数之后效果可能更好</li></ul><h3 id="使用bn层改造模型" tabindex="-1"><a class="header-anchor" href="#使用bn层改造模型" aria-hidden="true">#</a> 使用BN层改造模型</h3><ul><li>在模型中新增BN层（卷积层和全连接层都需要分别添加不同的BN层）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">super</span><span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>bn_c1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment"># 第一个参数num_features = 上一层的输出数</span>
    self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>bn_c2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>bn_c3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>
    ···
    self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>bn_f1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>bn_f2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在卷积层和全连接层后面加上BN层</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_c1<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_c2<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_c3<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># x = self.pool(self.bn_c1(F.relu(self.conv1(x))))</span>
    <span class="token comment"># x = self.pool(self.bn_c2(F.relu(self.conv2(x))))</span>
    <span class="token comment"># x = self.pool(self.bn_c3(F.relu(self.conv3(x))))</span>
    x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_f1<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn_f2<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># x = self.bn_f1(F.relu(self.fc1(x)))</span>
    <span class="token comment"># x = self.bn_f2(F.relu(self.fc2(x)))</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810191527845.png" alt="image-20230810155201484" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230809195228966.png" alt="image-20230810155228975" loading="lazy"></p><h2 id="超参数选择原则" tabindex="-1"><a class="header-anchor" href="#超参数选择原则" aria-hidden="true">#</a> 超参数选择原则</h2><h3 id="网络容量" tabindex="-1"><a class="header-anchor" href="#网络容量" aria-hidden="true">#</a> 网络容量</h3><ul><li>可以认为与网络中可训练参数成正比</li><li>网络中神经单元数越多，层数越多，神经网络的拟合能力越强</li><li>但训练速度，难度越大，越容易产生过拟合</li></ul><h3 id="如何选择超参数" tabindex="-1"><a class="header-anchor" href="#如何选择超参数" aria-hidden="true">#</a> 如何选择超参数</h3><ul><li>所谓超参数，就是搭建神经网络中，需要我们自己选择（不是通过SGD去优化）的那些参数</li><li>比如：中间层的神经元个数，学习速率</li></ul><h4 id="如何提高网络的拟合能力" tabindex="-1"><a class="header-anchor" href="#如何提高网络的拟合能力" aria-hidden="true">#</a> 如何提高网络的拟合能力</h4><ul><li><p>增大网络容量</p><ul><li><p>增加层 √</p></li><li><p>增加隐藏神经元个数</p></li></ul></li><li><p>单纯增加神经元个数对网络性能提高并不明显</p></li><li><p>增加层会大大提高网络的拟合能力</p></li><li><p>单层神经元个数不能太小，太小会造成信息瓶颈，使得模型欠拟合</p></li></ul><h4 id="参数的选择原则" tabindex="-1"><a class="header-anchor" href="#参数的选择原则" aria-hidden="true">#</a> 参数的选择原则</h4><ul><li><p>理想的模型是刚好在欠拟合和过拟合的界线上，也就是正好拟合数据</p></li><li><p>首先开发一个过拟合的模型</p><ul><li>添加更多的层</li><li>让每一层变得更大</li><li>训练更多的轮次</li></ul></li><li><p>然后抑制过拟合</p><ul><li>dropout</li><li>正则化</li><li>图像增强</li></ul></li><li><p>再次调节超参数</p><ul><li>学习速率</li><li>隐藏层单元数</li><li>训练轮次</li></ul></li><li><p>超参数的选择是一个经验与不断测试的结果</p></li><li><p>经典机器学习的方法，如特征工程，增加训练数据也要做</p></li><li><p>交叉验证</p></li></ul><h3 id="构建网络的总原则" tabindex="-1"><a class="header-anchor" href="#构建网络的总原则" aria-hidden="true">#</a> 构建网络的总原则</h3><ul><li>保证神经网络容量足够拟合数据</li></ul><ol><li>增大网络容量直至过拟合</li><li>采取措施抑制过拟合</li><li>继续增大网络容量，直到过拟合</li></ol>`,70),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","计算机视觉基础.html.vue"]]);export{k as default};
