import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-OTaO6_y0.js";const p={},e=t(`<h1 id="多层感知机" tabindex="-1"><a class="header-anchor" href="#多层感知机" aria-hidden="true">#</a> 多层感知机</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><ul><li>上面的逻辑回归模型是单个神经元 <ul><li>计算输入特征的加权和</li><li>使用一个激活函数（或传递函数）计算输出</li></ul></li></ul><p><strong>单个神经元（二分类）</strong></p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230804161804006.png" alt="image-20230804194312492" tabindex="0" loading="lazy"><figcaption>image-20230804194312492</figcaption></figure><p><strong>多个神经元（多分类）</strong></p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230804195423178.png" alt="image-20230804194418645" tabindex="0" loading="lazy"><figcaption>image-20230804194418645</figcaption></figure><ul><li><p>单层神经元无法拟合“异或“运算，也就是无法解决非线性问题</p></li><li><p>为了解决非线性问题，采取在神经网络的输入端和输出端之间插更多的神经元</p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230804194418645.png" alt="image-20230804194948252" tabindex="0" loading="lazy"><figcaption>image-20230804194948252</figcaption></figure><h2 id="激活函数" tabindex="-1"><a class="header-anchor" href="#激活函数" aria-hidden="true">#</a> 激活函数</h2><h3 id="relu" tabindex="-1"><a class="header-anchor" href="#relu" aria-hidden="true">#</a> relu</h3><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230804194948252.png" alt="image-20230804195140820" loading="lazy"> $$ f(x) = max(x,0) $$</p><h3 id="sigmoid" tabindex="-1"><a class="header-anchor" href="#sigmoid" aria-hidden="true">#</a> sigmoid</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230804195928412.png" alt="image-20230804195423178" tabindex="0" loading="lazy"><figcaption>image-20230804195423178</figcaption></figure><ul><li>一般逻辑回归最后都用<code>sigmoid</code>作为输出层</li></ul><h3 id="tanh" tabindex="-1"><a class="header-anchor" href="#tanh" aria-hidden="true">#</a> tanh</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230808174730227.png" alt="image-20230804195736751" tabindex="0" loading="lazy"><figcaption>image-20230804195736751</figcaption></figure><ul><li>双曲正切激活函数</li><li>输出被钳制在<code>(-1,1)</code>之间</li></ul><h3 id="leak-relu" tabindex="-1"><a class="header-anchor" href="#leak-relu" aria-hidden="true">#</a> Leak relu</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230808162747792.png" alt="image-20230804195928412" tabindex="0" loading="lazy"><figcaption>image-20230804195928412</figcaption></figure><h2 id="多层感知机案例" tabindex="-1"><a class="header-anchor" href="#多层感知机案例" aria-hidden="true">#</a> 多层感知机案例</h2><h3 id="数据预处理" tabindex="-1"><a class="header-anchor" href="#数据预处理" aria-hidden="true">#</a> <strong>数据预处理</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;./1.基础部分(第1-7章)参考代码和数据集/第5章/HR.csv&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将文本数据转换为one-hot编码格式，并作为新的列加入到特征数据中，然后删除原文本数据列</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>data<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token keyword">del</span> data<span class="token punctuation">[</span><span class="token string">&#39;salary&#39;</span><span class="token punctuation">]</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>data<span class="token punctuation">.</span>part<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> data<span class="token punctuation">[</span><span class="token string">&#39;part&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Y_data <span class="token operator">=</span> data<span class="token punctuation">.</span>left<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>							<span class="token comment"># 取出标签列</span>
Y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>Y_data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>
X_data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> data<span class="token punctuation">.</span>columns <span class="token keyword">if</span> c <span class="token operator">!=</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values	<span class="token comment"># 取出除了标签列以外所有列</span>
X <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>X_data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建模型" tabindex="-1"><a class="header-anchor" href="#创建模型" aria-hidden="true">#</a> <strong>创建模型</strong></h3><ul><li>自定义模型过程 <ul><li><code>nn.Module</code>:继承这个类</li><li><code>__init__</code>:初始化所有的层</li><li><code>forward</code>:定义模型的运算过程（前向传播的过程）</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>liner_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>	<span class="token comment"># 第一层：输入20输出64</span>
        self<span class="token punctuation">.</span>liner_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>	<span class="token comment"># 第二层：输入64输出64</span>
        self<span class="token punctuation">.</span>liner_3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>	<span class="token comment"># 第三层：输入64输出1</span>
        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sigmoid <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>liner_1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>	<span class="token comment"># 将传入数据输入第一层</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>		<span class="token comment"># 激活第一层输出</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>liner_2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>		<span class="token comment"># 将第一层输出输入第二层</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>		<span class="token comment"># 激活第二层输出</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>liner_3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>		<span class="token comment"># 将第二层输出输入第三层</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span>		<span class="token comment"># 激活第三层输出</span>
        <span class="token keyword">return</span> x				<span class="token comment"># 返回最终输出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="改写模型" tabindex="-1"><a class="header-anchor" href="#改写模型" aria-hidden="true">#</a> <strong>改写模型</strong></h3><ul><li><code>torch.nn.functional</code><ul><li><code>nn</code>模块下的一个函数库，方便用调API的方法使用激活函数</li><li>使代码更加简洁</li></ul></li><li>创建<code>get_model()</code>方法，封装模型和优化器创建过程</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F

<span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>liner_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>liner_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>liner_3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>liner_1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>liner_2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>liner_3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
    
    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span>
        opt <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span>
        <span class="token keyword">return</span> model<span class="token punctuation">,</span> opt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="训练模型" tabindex="-1"><a class="header-anchor" href="#训练模型" aria-hidden="true">#</a> 训练模型</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>loss_fn<span class="token operator">=</span> nn<span class="token punctuation">.</span>BCELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
batch <span class="token operator">=</span> <span class="token number">64</span>
num_of_batches <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">//</span>batch
epochs <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_of_batches<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> i <span class="token operator">*</span> batch
        end <span class="token operator">=</span> start <span class="token operator">+</span> batch
        x <span class="token operator">=</span> X<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>
        y <span class="token operator">=</span> Y<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>
        y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
        opt<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;epoch:&#39;</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">&#39;loss:&#39;</span><span class="token punctuation">,</span> loss_fn<span class="token punctuation">(</span>model<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出每一个epoch的损失</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>epoch: 0 loss: 0.5257824659347534
epoch: 1 loss: 0.5202305912971497
epoch: 2 loss: 0.5164764523506165
epoch: 3 loss: 0.5177185535430908
···
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dataset改写batch" tabindex="-1"><a class="header-anchor" href="#dataset改写batch" aria-hidden="true">#</a> dataset改写batch</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> TensorDataset

<span class="token comment"># 将X,Y封装成一个dataset类型的数据</span>
HR_ds <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span>
<span class="token comment"># 用数据集和batch大小创建一个迭代器，shuffle属性代表是否随机</span>
HR_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>HR_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> 
<span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> HR_dl<span class="token punctuation">:</span> <span class="token comment"># 直接从迭代器里面获取x和y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加验证" tabindex="-1"><a class="header-anchor" href="#添加验证" aria-hidden="true">#</a> 添加验证</h3><ul><li><p><strong>过拟合</strong>：对于训练数据过度拟合，对于未知数据预测很差</p><p>使用dropout等手段防止</p></li><li><p><strong>欠拟合</strong>：对于训练数据拟合不足，对于未知数据预测很差</p><p>改进模型</p></li></ul><p><strong>使用<code>sklearn</code>划分训练集和验证集</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split

train_x<span class="token punctuation">,</span> test_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> test_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_data<span class="token punctuation">,</span> Y_data<span class="token punctuation">)</span>
<span class="token comment"># 划分的比例为25%</span>
X_data<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> Y_data<span class="token punctuation">.</span>shape <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">14999</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">14999</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
train_x<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> test_x<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> train_y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>shape <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">11249</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3750</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11249</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3750</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 划分后的数据类型为ndarray，需要转换为torch</span>
train_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
test_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
train_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>train_y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
test_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>test_y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># 创建数据集和迭代器</span>
train_ds <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span>
train_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_ds <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>test_x<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span>
test_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编写正确率计算方法</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">accuracy</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span>y_true<span class="token punctuation">)</span><span class="token punctuation">:</span>
    y_pred <span class="token operator">=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
    acc <span class="token operator">=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">==</span> y_true<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> acc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改写训练过程</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> train_dl<span class="token punctuation">:</span> <span class="token comment"># 从训练集中获取训练数据</span>
        y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
        opt<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        epoch_acc <span class="token operator">=</span> accuracy<span class="token punctuation">(</span>model<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span><span class="token punctuation">,</span> train_y<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>		 <span class="token comment"># 计算训练集正确率</span>
        epoch_loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>model<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span><span class="token punctuation">,</span> train_y<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>	 <span class="token comment"># 计算训练集损失</span>

        epoch_test_acc <span class="token operator">=</span> accuracy<span class="token punctuation">(</span>model<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>		 <span class="token comment"># 计算验证集正确率</span>
        epoch_test_loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>model<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 计算验证集损失</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;epoch:&#39;</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span><span class="token string">&#39;loss:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_loss<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                              <span class="token string">&#39;acc:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_acc<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token string">&#39;test_loss&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_test_loss<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token string">&#39;test_acc&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_test_acc<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
             <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>epoch: 0 loss: 0.556 acc: 0.764 test_loss 0.567 test_acc 0.755
epoch: 1 loss: 0.554 acc: 0.764 test_loss 0.563 test_acc 0.755
epoch: 2 loss: 0.551 acc: 0.764 test_loss 0.561 test_acc 0.755
···
epoch: 97 loss: 0.284 acc: 0.887 test_loss 0.273 test_acc 0.897
epoch: 98 loss: 0.254 acc: 0.914 test_loss 0.253 test_acc 0.915
epoch: 99 loss: 0.255 acc: 0.911 test_loss 0.255 test_acc 0.91
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","多层感知机.html.vue"]]);export{k as default};
