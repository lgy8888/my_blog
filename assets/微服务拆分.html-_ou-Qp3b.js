import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-OTaO6_y0.js";const t={},p=e(`<h1 id="微服务拆分" tabindex="-1"><a class="header-anchor" href="#微服务拆分" aria-hidden="true">#</a> 微服务拆分</h1><h2 id="服务拆分原则" tabindex="-1"><a class="header-anchor" href="#服务拆分原则" aria-hidden="true">#</a> 服务拆分原则</h2><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><h2 id="实现远程调用" tabindex="-1"><a class="header-anchor" href="#实现远程调用" aria-hidden="true">#</a> 实现远程调用</h2><ul><li>启动类中注册RestTemplate示例</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;???&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在需要其他服务数据的地方调用接口 <ul><li>restTemplate可以自动识别返回类型，将JSON类型数据转化为其他类型（list，pojo……）</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;???&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Pojo</span> pojo <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> pojo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提供者和消费者" tabindex="-1"><a class="header-anchor" href="#提供者和消费者" aria-hidden="true">#</a> 提供者和消费者</h2><ul><li>服务提供者：一次业务中，被其他微服务调用的服务。（提供接口给其他微服务）</li><li>服务消费者：一次业务中，调用其他微服务的服务。（调用其他微服务提供的接口）</li><li>一个服务既可以是提供者也可以是消费者</li></ul>`,10),l=[p];function c(o,i){return a(),s("div",null,l)}const d=n(t,[["render",c],["__file","微服务拆分.html.vue"]]);export{d as default};
