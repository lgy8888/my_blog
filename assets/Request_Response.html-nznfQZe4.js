import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-OTaO6_y0.js";const t={},p=e(`<h1 id="request-response" tabindex="-1"><a class="header-anchor" href="#request-response" aria-hidden="true">#</a> Request&amp;Response</h1><ul><li>Request获取请求数据</li><li>Response设置响应数据</li></ul><h2 id="request继承体系" tabindex="-1"><a class="header-anchor" href="#request继承体系" aria-hidden="true">#</a> Request继承体系</h2><p><code>ServletRequest</code>：Java提供的请求对象根接口</p><p><code>HttpServletRequest</code>：Java提供的对HTTP协议封装的请求对象接口</p><p><code>RequestFacade</code>：Tomcat定义的实现类</p><h2 id="request获取请求数据" tabindex="-1"><a class="header-anchor" href="#request获取请求数据" aria-hidden="true">#</a> Request获取请求数据</h2><h2 id="获取请求数据" tabindex="-1"><a class="header-anchor" href="#获取请求数据" aria-hidden="true">#</a> 获取请求数据</h2><ul><li><p>请求数据分为3部分</p><ul><li><p>请求行：<code>GET/request-demo/req1?username=zhangsan HTTP/1.1</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取请求方式：GET</span>
<span class="token class-name">String</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取虚拟目录（项目访问路径）：/request-demo</span>
<span class="token class-name">StringBuffer</span> <span class="token function">getRequsetUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取URL（统一资源定位符）：http://localhost:8080/request-demo/req1</span>
<span class="token class-name">String</span> <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取URI（统一资源标识符）：/request-demo/req1</span>
<span class="token class-name">String</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取请求参数（GET方式）：username=zhangsang&amp;password=123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>请求头：<code>User-Agent: ~</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据请求头名称，获取值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>请求体：<code>username=superbaby&amp;password=123</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletInputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取字节输入流</span>
<span class="token class-name">BufferedReader</span> <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取字符输入流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="通用方式获取请求参数" tabindex="-1"><a class="header-anchor" href="#通用方式获取请求参数" aria-hidden="true">#</a> 通用方式获取请求参数</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取所有参数Map集合</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据名称获取参数值（数组）</span>
<span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据名称获取参数值（单个值）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="request请求参数中文乱码处理" tabindex="-1"><a class="header-anchor" href="#request请求参数中文乱码处理" aria-hidden="true">#</a> Request请求参数中文乱码处理</h2><ul><li><p>请求参数如果存在中文数据，会乱码</p></li><li><p>POST：设置输入流的编码<code>req.setCharacterEncoding(&quot;UTF-8&quot;)</code></p></li><li><p>通用方式（GET/POST）：先编码后解码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">ISO_8859_1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="request请求转发" tabindex="-1"><a class="header-anchor" href="#request请求转发" aria-hidden="true">#</a> Request请求转发</h2><ul><li><p>请求转发（forward）：一种在服务器内部的资源跳转方式<img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230305221822837.png" alt="image-20230307085125260" loading="lazy"></p></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;资源B路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>请求转发资源间共享数据：使用Request对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//存储数据到request域中</span>
<span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据key获取值</span>
<span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据key删除键值对</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>请求转发特点</p><ul><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器的内部资源</li><li>一次请求，可以在转发的资源间使用request共享数据</li></ul></li></ul><h2 id="response继承体系" tabindex="-1"><a class="header-anchor" href="#response继承体系" aria-hidden="true">#</a> Response继承体系</h2><p><code>ServletResponse</code>：Java提供的请求对象根接口</p><p><code>HttpServletResponse</code>：Java提供的对HTTP协议封装的请求对象接口</p><p><code>ResponseFacade</code>：Tomcat定义的实现类</p><h2 id="response设置响应数据功能介绍" tabindex="-1"><a class="header-anchor" href="#response设置响应数据功能介绍" aria-hidden="true">#</a> Response设置响应数据功能介绍</h2><ul><li><p>响应数据分为3部分</p><ul><li><p>响应行：<code>HTTP/1.1 200 OK</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置响应状态码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>响应头：<code>Content-Type:text/html</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置响应头键值对</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>响应体：<code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PrintWriter</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取字符输出流</span>
<span class="token class-name">ServletOutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取字节输出流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="response完成重定向" tabindex="-1"><a class="header-anchor" href="#response完成重定向" aria-hidden="true">#</a> Response完成重定向</h2><ul><li>重定向（Redirect）：一种资源跳转方式</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230308203457875.png" alt="image-20230307091902135" tabindex="0" loading="lazy"><figcaption>image-20230307091902135</figcaption></figure><ul><li><p>实现方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 原理</span>
resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;资源B的路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 简化</span>
resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;资源B的路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重定向特点</p><ul><li>浏览器地址栏路径发生变化</li><li>可以重定向到任意位置的资源（服务器内部，外部均可）</li><li>两次请求，不能再多个资源使用request共享数据</li></ul></li></ul><h2 id="路径问题" tabindex="-1"><a class="header-anchor" href="#路径问题" aria-hidden="true">#</a> 路径问题</h2><ul><li>明确路径给谁用 <ul><li>浏览器使用：需要加虚拟目录（项目访问路径）</li><li>服务端使用：不需要加虚拟目录</li></ul></li><li>重定向中：可使用<code>request.getContextPath()</code>获取虚拟目录，实现动态加载虚拟目录</li></ul><h2 id="response响应字符数据" tabindex="-1"><a class="header-anchor" href="#response响应字符数据" aria-hidden="true">#</a> Response响应字符数据</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span> <span class="token comment">//输出为HTML格式和解决中文乱码</span>
<span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过Response对象获取字符输出流</span>
writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>输出内容<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//写数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>该流不需要关闭，响应结束，Response对象销毁，流被服务器关闭</li></ul><h2 id="response响应字节数据" tabindex="-1"><a class="header-anchor" href="#response响应字节数据" aria-hidden="true">#</a> Response响应字节数据</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过Response对象获取字符输出流</span>
outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>字节数据<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//写数据</span>
<span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span> <span class="token comment">//流的copy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用IOUtils工具类进行IO流操作 <ul><li>坐标：</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求转发和重定向的区别" tabindex="-1"><a class="header-anchor" href="#请求转发和重定向的区别" aria-hidden="true">#</a> 请求转发和重定向的区别</h2><h3 id="请求转发" tabindex="-1"><a class="header-anchor" href="#请求转发" aria-hidden="true">#</a> 请求转发</h3><ul><li><code>request.getRequestDispatcher().forward()</code></li><li>是一种服务器的行为</li><li>是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器。</li><li>浏览器不知道服务器发送的内容从哪里来的，因为这个跳转过程是在服务器实现的，并不是在客户端实现的</li><li>客户端并不知道这个跳转动作，所以它的地址栏还是原来的地址。</li></ul><h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h3><ul><li><code>response.sendRedirect()</code></li><li>是一种客户端的行为</li><li>是服务端根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址。</li><li>所以地址栏显示的是新的URL。</li></ul><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><ul><li>从地址栏显示来说 <ul><li>请求转发是地址栏不变</li><li>重定向地址栏改变</li></ul></li><li>从数据共享来说 <ul><li>请求转发可以共享request里面的数据</li><li>重定向不能共享数据</li></ul></li><li>从运用来说 <ul><li>请求转发一般用于用户登录的时候更具角色转发到相应的模块</li><li>重定向一般用于用户注销登录时返回主页面和跳转其他网站等</li></ul></li><li>从效率来说 <ul><li>请求转发效率高</li><li>重定向效率低</li></ul></li></ul>`,41),c=[p];function l(o,i){return a(),s("div",null,c)}const d=n(t,[["render",l],["__file","Request_Response.html.vue"]]);export{d as default};
