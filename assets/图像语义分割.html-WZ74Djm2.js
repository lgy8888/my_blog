import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-OTaO6_y0.js";const t={},o=p(`<h1 id="图像语义分割" tabindex="-1"><a class="header-anchor" href="#图像语义分割" aria-hidden="true">#</a> 图像语义分割</h1><h2 id="图像语义分割简介" tabindex="-1"><a class="header-anchor" href="#图像语义分割简介" aria-hidden="true">#</a> 图像语义分割简介</h2><ul><li>图像语义分割是计算机视觉中十分重要的领域</li><li>它是指像素级别的识别图像，即标注出图像中每个像素所属的对象类别</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813133647483.png" alt="image-20230813133342209" tabindex="0" loading="lazy"><figcaption>image-20230813133342209</figcaption></figure><ul><li>图像语义分割的目标是预测出图像中每一个像素的类标签，对图像中每一个像素点进行分类，确定每个点的类别（如属于背景，边缘或身体等）</li><li>与实例分割的区分 <ul><li>语义分割没有区分同一类别的实例</li><li>语义分割关心的只是像素的类别，若输入对象中有两个相同类别的对象，则分隔本身不将他们区分为单独的对象</li></ul></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813200130560.png" alt="image-20230813133647483" tabindex="0" loading="lazy"><figcaption>image-20230813133647483</figcaption></figure><h2 id="图像语义分割的应用" tabindex="-1"><a class="header-anchor" href="#图像语义分割的应用" aria-hidden="true">#</a> 图像语义分割的应用</h2><ul><li><p>自动驾驶汽车</p><ul><li>需要为汽车增加必要的感知，以了解他们所处的环境，以便自动驾驶汽车可以安全行驶</li></ul></li><li><p>医学图像诊断</p><ul><li>机器可以增强放射医生进行的分析，大大减少了运行诊断测试所需要的时间</li></ul></li><li><p>无人机着陆点判断</p></li><li><p>对街景的语义分割</p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813140543366.png" alt="image-20230813133950295" tabindex="0" loading="lazy"><figcaption>image-20230813133950295</figcaption></figure><h2 id="图像语义分割的实质" tabindex="-1"><a class="header-anchor" href="#图像语义分割的实质" aria-hidden="true">#</a> 图像语义分割的实质</h2><ul><li>一般是将一张RGB图像<code>(height * width * 3)</code>，或是灰度图像<code>(height * width * 1)</code>作为输入</li><li>输出的是分割图，其中每一个像素包含了其类别的标签<code>(height * width * 1)</code></li></ul><h2 id="unet" tabindex="-1"><a class="header-anchor" href="#unet" aria-hidden="true">#</a> Unet</h2><h3 id="unet概念" tabindex="-1"><a class="header-anchor" href="#unet概念" aria-hidden="true">#</a> Unet概念</h3><ul><li>Unet是2015年诞生的模型，几乎是当前segmentation项目中应用最广的模型</li><li>Unet能从更小的训练图像中进行学习，它在少于40张图片的生物医学数据集上训练时，IOU值仍能达到92%</li><li>Unet已经成为大多医疗影像语义分割任务的最基础的网络结构</li><li>Unet网络非常简单，前半部分作用是特征提取，后半部分是上采样。也有将这种结构叫做&quot;编码器-解码器&quot;结构</li><li>由于网络整体结构类似大写的英文字母U，所以得名U-net</li></ul><h3 id="unet结构" tabindex="-1"><a class="header-anchor" href="#unet结构" aria-hidden="true">#</a> Unet结构</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813133950295.png" alt="image-20230813140543366" tabindex="0" loading="lazy"><figcaption>image-20230813140543366</figcaption></figure><ul><li>Unet的左侧是convolution layers，右侧是upsamping layers</li><li>convolution层中每个池化前的输出值会concat到对应的upsamping层的输出值中</li></ul><h3 id="unet代码实现" tabindex="-1"><a class="header-anchor" href="#unet代码实现" aria-hidden="true">#</a> Unet代码实现</h3><h4 id="数据集预处理" tabindex="-1"><a class="header-anchor" href="#数据集预处理" aria-hidden="true">#</a> 数据集预处理</h4><ul><li>取出训练集和验证集的图片和遮罩图片</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>train_paths <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">r&#39;..\\..\\12-15\\第13章\\hk\\training\\*.png&#39;</span><span class="token punctuation">)</span>
test_paths <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">r&#39;..\\..\\12-15\\第13章\\hk\\testing\\*.png&#39;</span><span class="token punctuation">)</span>

train_img_paths <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> train_paths <span class="token keyword">if</span> <span class="token string">&#39;matte&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> p<span class="token punctuation">]</span>
train_anno_paths <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> train_paths <span class="token keyword">if</span> <span class="token string">&#39;matte&#39;</span> <span class="token keyword">in</span> p<span class="token punctuation">]</span>
test_img_paths <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> test_paths <span class="token keyword">if</span> <span class="token string">&#39;matte&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> p<span class="token punctuation">]</span>
test_anno_paths <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> test_paths <span class="token keyword">if</span> <span class="token string">&#39;matte&#39;</span> <span class="token keyword">in</span> p<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打乱数据集以及定义<code>transform</code>（不用进行数据增强）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>train_index <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_img_paths<span class="token punctuation">)</span><span class="token punctuation">)</span>

train_img_paths <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_img_paths<span class="token punctuation">)</span><span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>
train_anno_paths <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_anno_paths<span class="token punctuation">)</span><span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>

transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>
    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义数据集子类</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Hk_dataset</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_paths<span class="token punctuation">,</span> anno_paths<span class="token punctuation">,</span> transform<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>img_paths <span class="token operator">=</span> img_paths
        self<span class="token punctuation">.</span>anno_paths <span class="token operator">=</span> anno_paths
        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        img_path <span class="token operator">=</span> self<span class="token punctuation">.</span>img_paths<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        anno_path <span class="token operator">=</span> self<span class="token punctuation">.</span>anno_paths<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

        pil_img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
        img_tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>pil_img<span class="token punctuation">)</span>

        pil_anno <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>anno_path<span class="token punctuation">)</span>
        anno_tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>pil_anno<span class="token punctuation">)</span>
        anno_tensor<span class="token punctuation">[</span>anno_tensor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将像素限定为0和1两种分类</span>
        anno_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>anno_tensor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> img_tensor<span class="token punctuation">,</span> anno_tensor

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_paths<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建<code>Dataset</code>和<code>DataLoader</code></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>BATCH_SIZE <span class="token operator">=</span> <span class="token number">8</span>

train_ds <span class="token operator">=</span> Hk_dataset<span class="token punctuation">(</span>train_img_paths<span class="token punctuation">,</span> train_anno_paths<span class="token punctuation">,</span> transform<span class="token punctuation">)</span>
test_ds <span class="token operator">=</span> Hk_dataset<span class="token punctuation">(</span>test_img_paths<span class="token punctuation">,</span> test_anno_paths<span class="token punctuation">,</span> transform<span class="token punctuation">)</span>

train_dl <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_dl <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>test_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813142634739.png" alt="image-20230813200130560" tabindex="0" loading="lazy"><figcaption>image-20230813200130560</figcaption></figure><h4 id="创建unet模型" tabindex="-1"><a class="header-anchor" href="#创建unet模型" aria-hidden="true">#</a> 创建Unet模型</h4><ul><li><p>根据结构图定义模型架构</p></li><li><p><strong>定义下采样模块</strong></p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DownSample</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>DownSample<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> is_pool<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> is_pool<span class="token punctuation">:</span> x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>定义上采样模块</strong><ul><li><code>nn.ConvTranspose2d</code>（反卷积层） <ul><li><code>stride=2</code> -&gt; 运算一次图像翻倍</li><li><code>padding=1</code> -&gt; 标明图像从第2个像素开始反卷积</li><li><code>output_padding=1</code> -&gt; 反卷积后在图像四周填充1个像素</li></ul></li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UpSample</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>UpSample<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channels <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>channels<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>up_conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span>channels<span class="token punctuation">,</span> channels <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> 
                                          kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> is_conv<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> is_conv<span class="token punctuation">:</span> x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>up_conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>定义整体模型</strong></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Unet_model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Unet_model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>down1 <span class="token operator">=</span> DownSample<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>down2 <span class="token operator">=</span> DownSample<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>down3 <span class="token operator">=</span> DownSample<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>down4 <span class="token operator">=</span> DownSample<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>down5 <span class="token operator">=</span> DownSample<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>up1 <span class="token operator">=</span> UpSample<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>up2 <span class="token operator">=</span> UpSample<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>up3 <span class="token operator">=</span> UpSample<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>up4 <span class="token operator">=</span> UpSample<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>conv_2 <span class="token operator">=</span> DownSample<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv_1x1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># down-sampling layers</span>
        x1 <span class="token operator">=</span> self<span class="token punctuation">.</span>down1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> is_pool<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        x2 <span class="token operator">=</span> self<span class="token punctuation">.</span>down2<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>
        x3 <span class="token operator">=</span> self<span class="token punctuation">.</span>down3<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>
        x4 <span class="token operator">=</span> self<span class="token punctuation">.</span>down4<span class="token punctuation">(</span>x3<span class="token punctuation">)</span>
        x5 <span class="token operator">=</span> self<span class="token punctuation">.</span>down5<span class="token punctuation">(</span>x4<span class="token punctuation">)</span>

        <span class="token comment"># up-sampling layers</span>
        x6 <span class="token operator">=</span> self<span class="token punctuation">.</span>up1<span class="token punctuation">(</span>x5<span class="token punctuation">,</span> is_conv<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        x7 <span class="token operator">=</span> self<span class="token punctuation">.</span>up2<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>x4<span class="token punctuation">,</span> x6<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x8 <span class="token operator">=</span> self<span class="token punctuation">.</span>up3<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>x3<span class="token punctuation">,</span> x7<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x9 <span class="token operator">=</span> self<span class="token punctuation">.</span>up4<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>x2<span class="token punctuation">,</span> x8<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x10 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_2<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x9<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> is_pool<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

        output <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_1x1<span class="token punctuation">(</span>x10<span class="token punctuation">)</span>
        <span class="token keyword">return</span> output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模型训练" tabindex="-1"><a class="header-anchor" href="#模型训练" aria-hidden="true">#</a> 模型训练</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model <span class="token operator">=</span> Unet_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span>

loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
opt <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>
exp_lr_scheduler <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>opt<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
epochs <span class="token operator">=</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> model<span class="token punctuation">,</span> trainloader<span class="token punctuation">,</span> testloader<span class="token punctuation">)</span><span class="token punctuation">:</span>
    correct <span class="token operator">=</span> <span class="token number">0</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    running_loss <span class="token operator">=</span> <span class="token number">0</span>

    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> trainloader<span class="token punctuation">:</span>
        <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span>
        y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
        opt<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            y_pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
            correct <span class="token operator">+=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
            total <span class="token operator">+=</span> y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
    exp_lr_scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
    epoch_loss <span class="token operator">=</span> running_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>trainloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>
    epoch_acc <span class="token operator">=</span> correct <span class="token operator">/</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">256</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span>

    test_correct <span class="token operator">=</span> <span class="token number">0</span>
    test_total <span class="token operator">=</span> <span class="token number">0</span>
    test_running_loss <span class="token operator">=</span> <span class="token number">0</span>

    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> testloader<span class="token punctuation">:</span>
            <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">&#39;cuda&#39;</span><span class="token punctuation">)</span>
            y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
            y_pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
            test_correct <span class="token operator">+=</span> <span class="token punctuation">(</span>y_pred <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
            test_total <span class="token operator">+=</span> y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            test_running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>

    epoch_test_loss <span class="token operator">=</span> test_running_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>testloader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>
    epoch_test_acc <span class="token operator">=</span> test_correct <span class="token operator">/</span> <span class="token punctuation">(</span>test_total <span class="token operator">*</span> <span class="token number">256</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;epoch:&#39;</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span>
          <span class="token string">&#39;loss:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_loss<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string">&#39;acc:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_acc<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string">&#39;test_loss:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_test_loss<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string">&#39;test_accuracy:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>epoch_test_acc<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>

    <span class="token keyword">return</span> epoch_loss<span class="token punctuation">,</span> epoch_acc<span class="token punctuation">,</span> epoch_test_loss<span class="token punctuation">,</span> epoch_test_acc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>train_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
train_acc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
test_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
test_acc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    epoch_loss<span class="token punctuation">,</span> epoch_acc<span class="token punctuation">,</span> epoch_test_loss<span class="token punctuation">,</span> epoch_test_acc <span class="token operator">=</span> fit<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> model<span class="token punctuation">,</span> train_dl<span class="token punctuation">,</span> test_dl<span class="token punctuation">)</span>
    train_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>epoch_loss<span class="token punctuation">)</span>
    train_acc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>epoch_acc<span class="token punctuation">)</span>
    test_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>epoch_test_loss<span class="token punctuation">)</span>
    test_acc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>epoch_test_acc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> test_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;test_loss&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;train_acc&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;test_acc&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="图像语义分割的结构" tabindex="-1"><a class="header-anchor" href="#图像语义分割的结构" aria-hidden="true">#</a> 图像语义分割的结构</h2><h3 id="输入和输出" tabindex="-1"><a class="header-anchor" href="#输入和输出" aria-hidden="true">#</a> 输入和输出</h3><ul><li>网络的输入可以为任意尺寸的彩色图像</li><li>输入与输出尺寸相同</li><li>通道数为：n(目标类别数) + 1(背景)</li></ul><h3 id="全卷积" tabindex="-1"><a class="header-anchor" href="#全卷积" aria-hidden="true">#</a> 全卷积</h3><ul><li>网络在CNN卷积部分不用全连接</li><li>替换成卷积的目的是允许输入的图片为超过某一尺寸的任意大小</li></ul><h2 id="上采样-upsamping" tabindex="-1"><a class="header-anchor" href="#上采样-upsamping" aria-hidden="true">#</a> 上采样(Upsamping)</h2><ul><li><p>由于卷积的过程中，我们的特征图像变得很小</p></li><li><p>为了得到原图像大小的稠密像素预测，需要进行上采样</p></li><li><p>对应下采样三种方法：最大池化，平均池化，卷积操作</p><ul><li>插值法</li><li>反池化</li><li>反卷积（转置卷积） √ <ul><li>反卷积本质是通过训练（学习）来放大图片</li></ul></li></ul></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813142221908.png" alt="image-20230813142221908" tabindex="0" loading="lazy"><figcaption>image-20230813142221908</figcaption></figure><h2 id="iou评价指标" tabindex="-1"><a class="header-anchor" href="#iou评价指标" aria-hidden="true">#</a> IOU评价指标</h2><ul><li><p>IOU也可以叫交并比，是一种测量在特定数据及中检测相应物体准确度的一个标准</p></li><li><p>IOU是一个简单的测量标准，只要是在输出中得到一个预测范围（bounding boxes）的任务都可以用IoU来测量</p><ul><li>比如：目标检测，语义分割等</li></ul></li><li><p>IOU表示产生的候选框与原标记框的交叠率，或者说重叠度。也就是他们的交集与并集的比值</p></li><li><p>最理想情况是完全重叠，即比值为1</p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813202138922.png" alt="image-20230813142634739" tabindex="0" loading="lazy"><figcaption>image-20230813142634739</figcaption></figure><h2 id="linknet" tabindex="-1"><a class="header-anchor" href="#linknet" aria-hidden="true">#</a> LinkNet</h2><ul><li>像素级的图像语义分割不仅需要精确，还需要高效，以便应用到实时应用中 <ul><li>比如自动驾驶</li></ul></li></ul><h3 id="网络结构" tabindex="-1"><a class="header-anchor" href="#网络结构" aria-hidden="true">#</a> 网络结构</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813201604571.png" alt="image-20230813200955746" tabindex="0" loading="lazy"><figcaption>image-20230813200955746</figcaption></figure><ul><li><p>输入部分经历了两层</p><ul><li>conv：7*7，输入3输出64，步幅为2（缩放一半）</li><li>max-pool：3*3，再缩放一半</li></ul></li><li><p>输出部分经历了三层</p><ul><li>full-conv（ConvTranspose）：3*3，输入64输出32，步幅为2（扩大一倍）</li><li>conv：3*3，输入32输出32,</li><li>full-conv（ConvTranspose）：2*2，输入64输出N，步幅为2（再扩大一倍）（恢复原来大小）</li></ul></li></ul><h3 id="encode-block" tabindex="-1"><a class="header-anchor" href="#encode-block" aria-hidden="true">#</a> encode-block</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813200955746.png" alt="image-20230813201604571" tabindex="0" loading="lazy"><figcaption>image-20230813201604571</figcaption></figure><ul><li><p>使用了残差连接，结构与ResNet类似</p></li><li><p>第一部分为两层3*3的conv层，与ResNet结构不同的是第一个conv层对输入进行了一次缩放</p></li><li><p>第二部分同样为两层3*3的conv层，与ResNet结构相同</p></li><li><p>LinkNet的编码器在shortcut时，对输入进行了一次卷积层的缩放，再与两层conv层输出相加得到输出</p></li></ul><h3 id="decode-block" tabindex="-1"><a class="header-anchor" href="#decode-block" aria-hidden="true">#</a> decode-block</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813202816794.png" alt="image-20230813202138922" tabindex="0" loading="lazy"><figcaption>image-20230813202138922</figcaption></figure><ul><li>经过两层卷积和一层反卷积</li><li>反卷积对编码器传过来的图片进行放大</li></ul><h3 id="效果比较" tabindex="-1"><a class="header-anchor" href="#效果比较" aria-hidden="true">#</a> 效果比较</h3><ul><li><p>速度：一次前项运算所需操作数、运行时间</p></li><li><p>精度：使用Cityscapes和CamVid数据集进行测试</p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230828155109787.png" alt="image-20230813202648937" tabindex="0" loading="lazy"><figcaption>image-20230813202648937</figcaption></figure><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230828155335422.png" alt="image-20230813202816794" tabindex="0" loading="lazy"><figcaption>image-20230813202816794</figcaption></figure><h3 id="linknet代码实现" tabindex="-1"><a class="header-anchor" href="#linknet代码实现" aria-hidden="true">#</a> LinkNet代码实现</h3><h4 id="conv卷积模块" tabindex="-1"><a class="header-anchor" href="#conv卷积模块" aria-hidden="true">#</a> Conv卷积模块</h4><p><strong>卷积+BN+ReLU</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Conv_Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Conv_Block<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span>kernel_size<span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> padding<span class="token operator">=</span>padding<span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="deconv反卷积模块" tabindex="-1"><a class="header-anchor" href="#deconv反卷积模块" aria-hidden="true">#</a> DeConv反卷积模块</h4><p><strong>反卷积+BN+ReLU</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DeConv_Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>DeConv_Block<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>de_conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span>kernel_size<span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>
                                          padding<span class="token operator">=</span>padding<span class="token punctuation">,</span> output_padding<span class="token operator">=</span>output_padding<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> is_act<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>de_conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">if</span> is_act<span class="token punctuation">:</span> x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="encode编码器" tabindex="-1"><a class="header-anchor" href="#encode编码器" aria-hidden="true">#</a> Encode编码器</h4><p><strong>4个卷积模块</strong></p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813200955746.png" alt="image-20230813201604571" tabindex="0" loading="lazy"><figcaption>image-20230813201604571</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Encode_Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Encode_Block<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1_1 <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1_2 <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2_1 <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2_2 <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>shortcut <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        out1 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1_1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        out1 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2_1<span class="token punctuation">(</span>out1<span class="token punctuation">)</span>
        residue <span class="token operator">=</span> self<span class="token punctuation">.</span>shortcut<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        out2 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2_1<span class="token punctuation">(</span>out1 <span class="token operator">+</span> residue<span class="token punctuation">)</span>
        out2 <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2_2<span class="token punctuation">(</span>out2<span class="token punctuation">)</span>
        <span class="token keyword">return</span> out2 <span class="token operator">+</span> out1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="decode解码器" tabindex="-1"><a class="header-anchor" href="#decode解码器" aria-hidden="true">#</a> Decode解码器</h4><p><strong>卷积模块+反卷积模块+卷积模块</strong></p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813202816794.png" alt="image-20230813202138922" tabindex="0" loading="lazy"><figcaption>image-20230813202138922</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Decode_Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Decode_Block<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> in_channels <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>full_conv <span class="token operator">=</span> DeConv_Block<span class="token punctuation">(</span>in_channels <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> in_channels <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span>in_channels <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>full_conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="net整体网络结构" tabindex="-1"><a class="header-anchor" href="#net整体网络结构" aria-hidden="true">#</a> Net整体网络结构</h4><p><strong>卷积模块+反卷积模块+编码器+解码器</strong></p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230813201604571.png" alt="image-20230813200955746" tabindex="0" loading="lazy"><figcaption>image-20230813200955746</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LinkNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>LinkNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>in_conv <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>eb1 <span class="token operator">=</span> Encode_Block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>eb2 <span class="token operator">=</span> Encode_Block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>eb3 <span class="token operator">=</span> Encode_Block<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>eb4 <span class="token operator">=</span> Encode_Block<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>db4 <span class="token operator">=</span> Decode_Block<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>db3 <span class="token operator">=</span> Decode_Block<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>db2 <span class="token operator">=</span> Decode_Block<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>db1 <span class="token operator">=</span> Decode_Block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>full_conv1 <span class="token operator">=</span> DeConv_Block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>out_conv <span class="token operator">=</span> Conv_Block<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>full_conv2 <span class="token operator">=</span> DeConv_Block<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> output_padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>in_conv<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>  <span class="token comment">#  (6, 128, 128, 64)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">#  (6, 64, 64, 64)</span>
        x1 <span class="token operator">=</span> self<span class="token punctuation">.</span>eb1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">#  (6, 32, 32, 64)</span>
        x2 <span class="token operator">=</span> self<span class="token punctuation">.</span>eb2<span class="token punctuation">(</span>x1<span class="token punctuation">)</span>  <span class="token comment">#  (6, 16, 16, 128)</span>
        x3 <span class="token operator">=</span> self<span class="token punctuation">.</span>eb3<span class="token punctuation">(</span>x2<span class="token punctuation">)</span>  <span class="token comment">#  (6, 8, 8, 256)</span>
        x4 <span class="token operator">=</span> self<span class="token punctuation">.</span>eb4<span class="token punctuation">(</span>x3<span class="token punctuation">)</span>  <span class="token comment">#  (6, 4, 4, 512)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>db4<span class="token punctuation">(</span>x4<span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>db3<span class="token punctuation">(</span>out <span class="token operator">+</span> x3<span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>db2<span class="token punctuation">(</span>out <span class="token operator">+</span> x2<span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>db1<span class="token punctuation">(</span>out <span class="token operator">+</span> x1<span class="token punctuation">)</span>

        out <span class="token operator">=</span> self<span class="token punctuation">.</span>full_conv1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>out_conv<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>full_conv2<span class="token punctuation">(</span>out<span class="token punctuation">,</span> is_act<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="计算iou-交并比" tabindex="-1"><a class="header-anchor" href="#计算iou-交并比" aria-hidden="true">#</a> 计算IOU(交并比)</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>epoch_iou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 定义IOU列表</span>
<span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> trainloader<span class="token punctuation">:</span>
    ···
    intersection <span class="token operator">=</span> torch<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span> <span class="token comment"># 计算交集</span>
    union <span class="token operator">=</span> torch<span class="token punctuation">.</span>logical_or<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span> <span class="token comment"># 计算并集</span>
    batch_iou <span class="token operator">=</span> torch<span class="token punctuation">.</span>true_divide<span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>intersection<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>union<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 计算交并比</span>
    epoch_iou<span class="token punctuation">.</span>append<span class="token punctuation">(</span>batch_iou<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将IOU换到cpu里面然后填充进IOU列表中</span>
    ···
···
<span class="token string">&#39;IOU:&#39;</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>epoch_iou<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 计算IOU均值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,87),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","图像语义分割.html.vue"]]);export{r as default};
