import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as p,c as o,b as a,d as t,e,f as n}from"./app-OTaO6_y0.js";const c={},u=n(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><h2 id="javascript简介" tabindex="-1"><a class="header-anchor" href="#javascript简介" aria-hidden="true">#</a> JavaScript简介</h2><ul><li>JavaScript是一门跨平台，面向对象的脚本语言，来控制网页行为的，它能使网页可交互</li><li>JavaScript和Java是完全不同的语言，无论是概念还是设计，但是基础语法相似</li></ul><h2 id="javascript引入方式" tabindex="-1"><a class="header-anchor" href="#javascript引入方式" aria-hidden="true">#</a> JavaScript引入方式</h2><ul><li>内部脚本：将JS代码定义在HTML页面中 <ul><li>在HTML中，JavaScript代码必须位于<code>&lt;script&gt;&lt;/script&gt;</code>之间</li><li>在HTML文档中可以在任意地方放置任意数量的<code>&lt;script&gt;&lt;/script&gt;</code></li><li>一般把脚本置于<code>&lt;body&gt;</code>元素底部，可以改善显示速度，因为脚本执行会拖慢显示</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello JS~&quot;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>外部脚本：将JS代码定义在外部JS文件中，然后引入到HTML页面中</p><ul><li><p>外部文件：demo.js</p></li><li><p>引入外部js文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/demo.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>外部脚本不能包含<code>&lt;script&gt;</code>标签</p></li><li><p><code>&lt;script&gt;</code>标签不能自闭合</p></li></ul></li></ul><h2 id="javascript基础语法" tabindex="-1"><a class="header-anchor" href="#javascript基础语法" aria-hidden="true">#</a> JavaScript基础语法</h2><h2 id="书写语法" tabindex="-1"><a class="header-anchor" href="#书写语法" aria-hidden="true">#</a> 书写语法</h2><ul><li>区分大小写：与Java一样，变量名，函数名以及一切东西都是区分大小写的</li><li>每行结尾的分号可有可无</li><li>注释： <ul><li>单行注释：//</li><li>多行注释：/* */</li></ul></li><li>大括号表示代码块</li></ul><h2 id="输出语句" tabindex="-1"><a class="header-anchor" href="#输出语句" aria-hidden="true">#</a> 输出语句</h2><ul><li>使用<code>window.alert()</code> 写入警告框</li><li>使用<code>document.write()</code>写入HTML输出</li><li>使用<code>consle.log()</code>写入浏览器控制台</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><ul><li>JavaScript用<code>var</code>，<code>let</code>和<code>const</code>关键字来声明变量</li><li>JavaScript是一门弱类型语言，变量<strong>可以存放不同类型的值</strong></li><li>变量名需要遵循以下规则（类似Java） <ul><li>组成字符可以是任何字幕，数字，下划线，美元符号</li><li>数字不能开头</li><li>建议使用驼峰命名法</li></ul></li><li><code>var</code>关键字声明的变量<strong>作用于全局</strong>，并且可以<strong>重复定义</strong></li><li><code>let</code>关键字定义的变量用法类似<code>var</code>，但是所声明的变量只在**<code>let</code>关键字所在的代码块内有效**，且<strong>不允许重复声明</strong></li><li><code>const</code>关键字用来声明一个<strong>只读的常量</strong>，一旦声明，常量的值就不能改变</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><ul><li>JavaScript中数据类型分为：原始类型和引用类型</li><li>5种原始类型 <ul><li>number：数字（整数，小数，NaN）</li><li>string：字符、字符串（单双引号都可）</li><li>boolean：布尔，true/false</li><li>null：对象为空</li><li>undefined：当声明的变量未初始化时，该变量的默认值为undefined</li></ul></li><li>用typeof运算符可以获取数据类型</li><li>类型转换 <ul><li>其他类型转为number <ul><li>string：字面值如果是数字则转为数字，不是则转为NaN</li><li>boolean：true转为1，false转为0</li></ul></li><li>其他类型转为boolean <ul><li>number：0和NaN转为false，其他转为true</li><li>string：空字符串转为false，其他转为true</li><li>null：false</li><li>undefined：false</li></ul></li></ul></li></ul><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><ul><li>一元运算符：++，--</li><li>算术运算符：+，-，*，/，%</li><li>赋值运算符：=，+=，-=</li><li>关系运算符：&gt;，&lt;，&gt;=，&lt;=，<mark>，!=，</mark>=(类型跟值都一样返回true)</li><li>逻辑运算符：&amp;&amp;，||，!</li><li>三元运算符：条件表达式? valueWhenTrue:valueWhenFalse</li></ul><h2 id="流程控制语句" tabindex="-1"><a class="header-anchor" href="#流程控制语句" aria-hidden="true">#</a> 流程控制语句</h2><ul><li>与Java一模一样</li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><ul><li><p>函数（方法）是背设计为执行特定任务的代码块</p></li><li><p>定义方式一：JavaScript函数通过<code>function</code>关键词进行定义，语法为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2……</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    functionBody<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>形式参数不需要类型，因为JavaScript是弱类型语言</li><li>返回值也不需要定义类型，可以在函数内部直接<code>return</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用：函数名称（实际参数列表）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>定义方式二</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">functionName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2……</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    functionBody<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用：JS中，函数调用可以传递任意个参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="javascript常用对象" tabindex="-1"><a class="header-anchor" href="#javascript常用对象" aria-hidden="true">#</a> JavaScript常用对象</h2><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h2><ul><li><p>JavaScript Array对象用于定义数组</p></li><li><p>定义</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方式1</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//方式2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>访问</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>JS数组类似Java集合，长度类型都可变（ArrayList）</p></li><li><p>直接打印arr，显示的是所有值，值与值之间用逗号隔开</p></li></ul><h3 id="array对象属性" tabindex="-1"><a class="header-anchor" href="#array对象属性" aria-hidden="true">#</a> Array对象属性</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230316150134648.png" alt="image-20230316150134648" tabindex="0" loading="lazy"><figcaption>image-20230316150134648</figcaption></figure><h3 id="array对象方法" tabindex="-1"><a class="header-anchor" href="#array对象方法" aria-hidden="true">#</a> Array对象方法</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230316154006043.png" alt="image-20230316150157969" tabindex="0" loading="lazy"><figcaption>image-20230316150157969</figcaption></figure><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><ul><li><p>定义</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token comment">//方式1</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token comment">//方式2</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token comment">//方式2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>属性</p><ul><li>length：字符串长度</li></ul></li><li><p>方法</p><ul><li>charAt()：返回在指定位置的字符</li><li>indexOf()：检索字符串</li><li>trim()：去除字符串两端的空白字符</li></ul></li></ul><h2 id="自定义对象" tabindex="-1"><a class="header-anchor" href="#自定义对象" aria-hidden="true">#</a> 自定义对象</h2><ul><li><p>格式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> 对象名称 <span class="token operator">=</span> <span class="token punctuation">{</span>
    属性名称<span class="token number">1</span><span class="token operator">:</span>属性值<span class="token number">1</span><span class="token punctuation">,</span>
    属性名称<span class="token number">2</span><span class="token operator">:</span>属性值<span class="token number">2</span><span class="token punctuation">,</span>
    ……
    <span class="token function-variable function">函数名称</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">形参列表</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    ……
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token function-variable function">eat</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;干饭~&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="bom" tabindex="-1"><a class="header-anchor" href="#bom" aria-hidden="true">#</a> BOM</h2><ul><li><strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel：浏览器对象模型</li><li>JavaScript将浏览器各个组成部分封装为对象</li><li>组成 <ul><li>Window：浏览器窗口对象</li><li>Navigator：浏览器对象 <ul><li><p>Screen：屏幕对象</p></li><li><p>History：历史记录对象</p></li><li><p>Location：地址栏对象</p></li></ul></li></ul></li></ul><h2 id="window" tabindex="-1"><a class="header-anchor" href="#window" aria-hidden="true">#</a> Window</h2><ul><li><p>浏览器窗口对象</p><ul><li><div class="language-javscript line-numbers-mode" data-ext="javscript"><pre class="language-javscript"><code>window.alert(&quot;abc&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>属性</p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230316150157969.png" alt="image-20230316154006043" tabindex="0" loading="lazy"><figcaption>image-20230316154006043</figcaption></figure></li><li><p>方法</p><ul><li><p>alert(msg)：弹出一段信息，只能确认</p></li><li><p>confirm(msg)：可以点确认和取消，确认-&gt;true，取消-&gt;false，返回一个布尔值</p></li><li><p>setTimeout(function，毫秒值)：设置一个时间后执行代码，只执行一次</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 3秒后弹出警告框显示hello，然后就没了</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>setInterval(function，毫秒值)：设置一个时间后执行代码，每隔这段时间执行一次</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 3秒后弹出警告框显示hello，再3秒后再弹出，持续到服务器关闭</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> History</h2><ul><li>历史记录</li><li>获取：使用<code>window.history</code>获取，其中<code>window.</code>可省略</li><li>方法 <ul><li><code>back()</code>：后退，加载history列表的前一个URL</li><li><code>forward()</code>：前进，加载history列表的下一个URL</li></ul></li></ul><h2 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> Location</h2><ul><li>地址栏对象</li><li>获取：使用<code>window.location</code>获取，其中<code>window.</code>可省略</li><li>属性：<code>href</code>：设置或返回完整的URL</li></ul><h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom" aria-hidden="true">#</a> DOM</h2><ul><li><strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel：文档对象模型</li><li>将标记语言的各个组成部分封装为对象</li><li>DOM树 <img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230317100711404.png" alt="image-20230317100711404" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230317100644283.png" alt="image-20230317100644283" loading="lazy"></li><li>DOM是W3C（万维网联盟）的标准</li><li>DOM定义了访问HTML和XML文档的表准</li><li>W3C DOM标准被分为3个不同的部分 <ul><li><p>核心DOM：针对任何结构化文档的标准模型</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul></li><li><p>XML DOM：针对XML文档的标准模型</p></li><li><p><strong>HTML DOM</strong>：针对HTML文档的标准模型</p><ul><li>Image：<code>&lt;img&gt;</code></li><li>Buttom：<code>&lt;input type=&quot;button&quot;&gt;</code></li></ul></li></ul></li></ul><h2 id="获取element" tabindex="-1"><a class="header-anchor" href="#获取element" aria-hidden="true">#</a> 获取Element</h2><ul><li>使用Document对象的方法来获取</li><li><code>getElementById</code>：根据id属性值获取，返回一个Element对象</li><li><code>getElementsByTagName</code>：根据标签名称获取，返回一个Element对象数组</li><li><code>getElementsByName</code>：根据name 属性值获取，返回一个Element对象数组</li><li><code>getElementsByClassName</code>：根据class属性值获取，返回一个Element对象数组</li></ul><h2 id="常见的html-dom对象" tabindex="-1"><a class="header-anchor" href="#常见的html-dom对象" aria-hidden="true">#</a> 常见的HTML DOM对象</h2>`,46),r={href:"https://www.w3school.com.cn/js/js_htmldom.asp",target:"_blank",rel:"noopener noreferrer"},d=n(`<h2 id="事件监听" tabindex="-1"><a class="header-anchor" href="#事件监听" aria-hidden="true">#</a> 事件监听</h2><ul><li>事件：HTML事件是发生在HTML元素上的&quot;事情&quot; <ul><li>按钮被点击</li><li>鼠标移动到元素上</li><li>按下键盘按键</li><li>……</li></ul></li><li>事件监听：JavaScript可以在事件被侦测到时执行代码</li></ul><h2 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定" aria-hidden="true">#</a> 事件绑定</h2><ul><li>方式1：通过HTML标签中的时间属性进行绑定</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;我被点了&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式2：通过DOM元素属性进行绑定（常用）</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;我被点了&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见事件" tabindex="-1"><a class="header-anchor" href="#常见事件" aria-hidden="true">#</a> 常见事件</h2><ul><li>onblur：失去焦点</li><li>onfocus：获得焦点</li><li>onchange：域内容被改变</li><li>onclick：单击</li><li>onkeydown：键盘按键被按下</li><li>onmouseover：鼠标移到某元素上</li><li>onmouseout：鼠标移开某元素</li><li>onsubmit：表单提交按钮被点击 <ul><li>return true -&gt; 表单提交</li><li>return false -&gt; 表单不提交</li></ul></li></ul>`,9),k={href:"https://www.w3school.com.cn/jsref/dom_obj_event.asp",target:"_blank",rel:"noopener noreferrer"},m=n('<h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><ul><li><p>概念：正则表达式定义了字符串组成的规则</p></li><li><p>定义</p><ul><li>直接量：不加引号：<code>var reg = /^\\w{6,12}$/</code></li><li>创建RegExp对象：<code>var reg = new RegExp(&quot;^\\w{6,12}$&quot;)</code></li></ul></li><li><p>方法：<code>reg.test(str)</code>：判断制定字符串是否符合规则，返回布尔值</p></li><li><p>语法</p></li></ul>',2),v=a("table",null,[a("thead",null,[a("tr",null,[a("th",null,"符号"),a("th",null,"含义")])]),a("tbody",null,[a("tr",null,[a("td",null,"^"),a("td",null,"开始")]),a("tr",null,[a("td",null,"$"),a("td",null,"结束")]),a("tr",null,[a("td",null,"[]"),a("td",null,"代表某个范围内的单个字符，[0-9] -> 单个数字字符")]),a("tr",null,[a("td",null,"."),a("td",null,"代表任意单个字符，除了换行和行结束符")]),a("tr",null,[a("td",null,"\\w"),a("td",null,"代表单词字符，字母 ，数字，下划线，相当于[A-Za-z0-9_]")]),a("tr",null,[a("td",null,"\\d"),a("td",null,"代表数字字符，相当于[0-9]")]),a("tr",null,[a("td",null,"+"),a("td",null,"至少一个")]),a("tr",null,[a("td",null,"*"),a("td",null,"零个或多个")]),a("tr",null,[a("td",null,"?"),a("td",null,"零个或一个")]),a("tr",null,[a("td",{x:""}),a("td",null,"x个")]),a("tr",null,[a("td",{"m,":""}),a("td",null,"至少m个")]),a("tr",null,[a("td",{"m,n":""}),a("td",null,"至少m个至多n个")])])],-1);function h(g,b){const s=i("ExternalLinkIcon");return p(),o("div",null,[u,a("p",null,[a("a",r,[t("JavaScript HTML DOM (w3school.com.cn)"),e(s)])]),d,a("p",null,[a("a",k,[t("HTML DOM 事件 (w3school.com.cn)"),e(s)])]),m,v])}const w=l(c,[["render",h],["__file","JavaScript.html.vue"]]);export{w as default};
