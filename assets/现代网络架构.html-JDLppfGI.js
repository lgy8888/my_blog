import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-OTaO6_y0.js";const p={},e=t(`<h1 id="现代网络架构" tabindex="-1"><a class="header-anchor" href="#现代网络架构" aria-hidden="true">#</a> 现代网络架构</h1><h2 id="resnet和残差结构介绍" tabindex="-1"><a class="header-anchor" href="#resnet和残差结构介绍" aria-hidden="true">#</a> ResNet和残差结构介绍</h2><h3 id="增加层的缺陷" tabindex="-1"><a class="header-anchor" href="#增加层的缺陷" aria-hidden="true">#</a> 增加层的缺陷</h3><ul><li>随着层数的增加，模型准确率得到提升，然后过拟合</li><li>这时再增加更多的层，准确率就会下降</li><li>当深度达到一定深度时，模型可能产生梯队消失或梯度爆炸问题</li><li>可以通过更好的初始化权重，添加BN层等解决</li><li>现代架构试图通过引入不同的技术来解决这些问题，例如：残差连接</li></ul><h3 id="resnet" tabindex="-1"><a class="header-anchor" href="#resnet" aria-hidden="true">#</a> ResNet</h3><ul><li>ResNet是一种残差网络</li><li>可以把它理解为一个模块，这个模块经过堆叠可以构成一个很深的网络</li><li>ResNet通过残差连接（shortcut connection），显式的让网络中的层拟合残差映射（residual mapping）</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230811155141812.png" alt="image-20230811153820004" tabindex="0" loading="lazy"><figcaption>image-20230811153820004</figcaption></figure><ul><li><p>ResNet不再尝试学习x到H(x)的潜在映射，而是学习两者之间的不同，或说残差（residual）</p></li><li><p>然后，为了计算H(x)，可将残差加到输入上</p></li><li><p>假设残差是F(x) = H(x) - x，我们将尝试学习F(x) + x，而不是学习H(x)</p></li><li><p>每个ResNet块都包含一系列层，残差连接吧块的输入加到块的输出上</p></li><li><p>由于加操作是在元素级别执行的，所以输入和输出的大小要一直</p></li><li><p>如果大小不同，我们可以采用填充的方式</p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230811193438204.png" alt="image-20230811155141812" tabindex="0" loading="lazy"><figcaption>image-20230811155141812</figcaption></figure><ul><li>ResNet网络结构为多个ResidualBlock的串联</li><li>学习残差比直接学习输入、输出间映射要容易收敛，可达到更高的分类精度，ResNet在上百层都有很好的表现</li></ul><h3 id="resnet网络结构特点" tabindex="-1"><a class="header-anchor" href="#resnet网络结构特点" aria-hidden="true">#</a> ResNet网络结构特点</h3><ul><li><p>与纯层的堆叠相比，ResNet多了很多“残差连接”，即shortcut路径，也就是Residual Block</p></li><li><p>ResNet中，所有的Residual Block都没有pooling层，降采样是通过conv的stride实现的</p></li><li><p>通过AveragePooling得到最终的特征，而不是通过全连接层</p></li><li><p>每个卷积层之后都紧接着BatchNorm层</p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230810155539827.png" alt="image-20230811155737903" tabindex="0" loading="lazy"><figcaption>image-20230811155737903</figcaption></figure><ul><li>ResNet结构非常容易修改和拓展，通过调整block内的channel数量以及堆叠的block数量，就可以很容易的调整网络的宽度和深度，来得到不同表达能力的网络，而不用过多担心网络的“退化”问题，只要训练数据足够，逐步加深网络，就可以获得更好的性能表现</li></ul><h3 id="resnet实现" tabindex="-1"><a class="header-anchor" href="#resnet实现" aria-hidden="true">#</a> ResNet实现</h3><ul><li>ResNet网络中的基础模块实现</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ResnetBasicBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span>
                               kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token comment"># 卷积运算会使图片损失k-1个像素点，k=3 -&gt; 损失2个像素点</span>
                               padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># padding=1 -&gt; 四周填充1个像素点，补齐了卷积运算损失的像素点</span>
                               bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 批标准化会将bias抵消，取消卷积层的bias以减少运算</span>
        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>  <span class="token comment"># (s - mean()) / std()</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        residual <span class="token operator">=</span> x

        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>

        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv21<span class="token punctuation">(</span>out<span class="token punctuation">)</span>
        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>

        out <span class="token operator">+=</span> residual
        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>   <span class="token comment"># F(x) + x</span>

        <span class="token keyword">return</span> out 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="densenet" tabindex="-1"><a class="header-anchor" href="#densenet" aria-hidden="true">#</a> DenseNet</h2><h3 id="densenet定义" tabindex="-1"><a class="header-anchor" href="#densenet定义" aria-hidden="true">#</a> DenseNet定义</h3><ul><li>ResNet使用了残差连接来搭建更深的网络</li><li>DenseNet更进一步，它引入了每层与所有后续层的连接，即每一层都接收所有前置层的特征平面作为输入</li></ul><p>$$ X_l = H_l(x_0, x_1, x_2, ···x_{l-1}) $$</p><ul><li>对比与ResNet的 Residual Block， 创新性的提出了Dense Block，在每一个Dense Block中，任何两层之间都有直接的连接，也就是说，网络的每一层的输入都是前面所有层输出的并集</li><li>该层所学习的特征图也会被直接传给其后面所有层作为输入</li><li>通过密集连接，缓解梯度消失问题，加强特征传播，鼓励特征复用，极大减少了参数量</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230811194800016.png" alt="image-20230811193438204" tabindex="0" loading="lazy"><figcaption>image-20230811193438204</figcaption></figure><ul><li><p>DenseNet并不会增加网络的参数量和计算量</p></li><li><p>DenseNet比其他网络效率更高，其关键就在于网络每层计算量的减少以及特征的重复利用</p></li><li><p>DenseNet而是让1层的输入直接影响到其后的所有层</p></li><li><p>DenseNet每一层中 $[x_0, x_1, x_2, ···,x_{l-1}]$ 就是将之前的feature map以通道的维度进行合并</p></li><li><p>由于每一层都包含之前所有层的输出信息，因此其只需要很少的特征图就够了</p></li><li><p>DenseNet的参数量较其他模型大大减少</p></li><li><p>DenseNet的密集连接方式需要特征图大小保持一致，为了解决这个问题，DenseNet网络中使用DenseBlock+Transition的结构</p><ul><li>其中DenseBlock是包含很多层的模块，每个层的特征图大小相同，层与层之间采用密集连接方式</li><li>Transition模块是连接两个相邻的DenseBlock，并且通过Pooling使特征图大小降低</li></ul></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230811194934860.png" alt="image-20230811194800016" tabindex="0" loading="lazy"><figcaption>image-20230811194800016</figcaption></figure><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230812113300612.png" alt="image-20230811194934860" tabindex="0" loading="lazy"><figcaption>image-20230811194934860</figcaption></figure><h3 id="densenet提取特征" tabindex="-1"><a class="header-anchor" href="#densenet提取特征" aria-hidden="true">#</a> DenseNet提取特征</h3><h4 id="数据集预处理" tabindex="-1"><a class="header-anchor" href="#数据集预处理" aria-hidden="true">#</a> 数据集预处理</h4><ul><li>创建所有图像地址列表和所有标签列表</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>all_img_path <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&#39;..\\..\\data\\CUB_200_2011\\images\\*\\*.jpg&#39;</span><span class="token punctuation">)</span>

all_labels_name <span class="token operator">=</span> <span class="token punctuation">[</span>img<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> img <span class="token keyword">in</span> all_img_path<span class="token punctuation">]</span>

label_to_index <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>all_labels_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
index_to_label <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> label_to_index<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

all_labels <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>label_to_index<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> all_labels_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对img和label进行乱序</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>random_index <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>all_img_path<span class="token punctuation">)</span><span class="token punctuation">)</span>

all_img_path <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>all_img_path<span class="token punctuation">)</span><span class="token punctuation">[</span>random_index<span class="token punctuation">]</span>
all_labels <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>all_labels<span class="token punctuation">)</span><span class="token punctuation">[</span>random_index<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>切片区分训练集和验证集</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>all_img_path<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span>

train_paths <span class="token operator">=</span> all_img_path<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>
train_labels <span class="token operator">=</span> all_labels<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>
test_paths <span class="token operator">=</span> all_img_path<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>
test_labels <span class="token operator">=</span> all_labels<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>初始化转换器（提取特征不需要做数据增强）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>
    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义数据集子类</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BirdsDataset</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_paths<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> transform<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>img_paths <span class="token operator">=</span> img_paths
        self<span class="token punctuation">.</span>labels <span class="token operator">=</span> labels
        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        img <span class="token operator">=</span> self<span class="token punctuation">.</span>img_paths<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        label <span class="token operator">=</span> self<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    
        pil_img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">&#39;RGB&#39;</span><span class="token punctuation">)</span>
        img_tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>pil_img<span class="token punctuation">)</span>
        <span class="token keyword">return</span> img_tensor<span class="token punctuation">,</span> label
    
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_paths<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建数据集和加载器</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>train_ds <span class="token operator">=</span> BirdsDataset<span class="token punctuation">(</span>train_paths<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> transform<span class="token punctuation">)</span>
test_ds <span class="token operator">=</span> BirdsDataset<span class="token punctuation">(</span>test_paths<span class="token punctuation">,</span> test_labels<span class="token punctuation">,</span> transform<span class="token punctuation">)</span>

BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span>
train_dl <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">)</span>
test_dl <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>test_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据集可视化</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>train_dl<span class="token punctuation">)</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>img<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>img_batch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label_batch<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    img <span class="token operator">=</span> img<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>index_to_label<span class="token punctuation">.</span>get<span class="token punctuation">(</span>label<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230811155737903.png" alt="image-20230812111342259" tabindex="0" loading="lazy"><figcaption>image-20230812111342259</figcaption></figure><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230812113250545.png" alt="image-20230812111713274" tabindex="0" loading="lazy"><figcaption>image-20230812111713274</figcaption></figure><h4 id="使用densenet提取特征" tabindex="-1"><a class="header-anchor" href="#使用densenet提取特征" aria-hidden="true">#</a> 使用DenseNet提取特征</h4><ul><li>导入DenseNet的卷积基</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>densenet_features<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>densenet121<span class="token punctuation">(</span>weights<span class="token operator">=</span>DenseNet121_Weights<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">.</span>features
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>冻结卷积基的参数</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> p <span class="token keyword">in</span> densenet_features<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>

device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">&#39;cuda:0&#39;</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">&#39;cpu&#39;</span><span class="token punctuation">)</span>
densenet_features<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>利用DenseNet预训练好的卷积基提取数据集图片特征</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>train_features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
train_features_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> img<span class="token punctuation">,</span> label <span class="token keyword">in</span> train_dl<span class="token punctuation">:</span>
    out <span class="token operator">=</span> densenet_features<span class="token punctuation">(</span>img<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>
    out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    train_features<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>out<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    train_features_label<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>label<span class="token punctuation">)</span>

test_features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
test_features_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> img<span class="token punctuation">,</span> label <span class="token keyword">in</span> test_dl<span class="token punctuation">:</span>
    out <span class="token operator">=</span> densenet_features<span class="token punctuation">(</span>img<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>
    out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    test_features<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>out<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    test_features_label<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>label<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建特征dataset类，有利于输入</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">FeatureDataset</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> feat_list<span class="token punctuation">,</span> label_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>feat_list <span class="token operator">=</span> feat_list
        self<span class="token punctuation">.</span>label_list <span class="token operator">=</span> label_list

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        feat <span class="token operator">=</span> self<span class="token punctuation">.</span>feat_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        label <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span> self<span class="token punctuation">.</span>label_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> feat<span class="token punctuation">,</span> label
    
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>feat_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建特征数据集和加载器</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>train_feat_ds <span class="token operator">=</span> FeatureDataset<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span>
test_feat_ds <span class="token operator">=</span> FeatureDataset<span class="token punctuation">(</span>test_features<span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span>

train_feat_dl <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_feat_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_feat_dl <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>test_feat_ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取输入特征长度</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>in_feat_size <span class="token operator">=</span> train_features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
in_feat_size
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义分类器</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">FCModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_size<span class="token punctuation">,</span> out_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_size<span class="token punctuation">,</span> out_size<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>net <span class="token operator">=</span> FCModel<span class="token punctuation">(</span>in_feat_size<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="训练分类器" tabindex="-1"><a class="header-anchor" href="#训练分类器" aria-hidden="true">#</a> 训练分类器</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
opt <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.00001</span><span class="token punctuation">)</span>
exp_lr_scheduler <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>opt<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
epochs <span class="token operator">=</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 用特征对分类器进行训练</span>
train_loss<span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> test_loss<span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> best_model_wts <span class="token operator">=</span> common<span class="token punctuation">.</span>ModelTrainer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>epochs<span class="token punctuation">,</span> train_feat_dl<span class="token punctuation">,</span> test_feat_dl<span class="token punctuation">,</span> net<span class="token punctuation">,</span> loss_fn<span class="token punctuation">,</span> opt<span class="token punctuation">)</span>
net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>best_model_wts<span class="token punctuation">)</span>  <span class="token comment"># 将模型锁定在最高准确率那里</span>

<span class="token operator">-</span><span class="token operator">&gt;</span> trained <span class="token number">30</span> epochs<span class="token punctuation">,</span> BestAcc<span class="token punctuation">:</span> <span class="token number">62.4</span><span class="token operator">%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;train_loss&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> test_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;test_loss&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;train_acc&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;test_acc&#39;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230812111342259.png" alt="image-20230812113250545" loading="lazy"><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230812131322454.png" alt="image-20230812113300612" loading="lazy"></p><h2 id="inception" tabindex="-1"><a class="header-anchor" href="#inception" aria-hidden="true">#</a> Inception</h2><h3 id="inception定义" tabindex="-1"><a class="header-anchor" href="#inception定义" aria-hidden="true">#</a> Inception定义</h3><ul><li>Inception模块把不同滤波器尺寸的卷积组合在一起，并联合了所有的输出</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230812122503629.png" alt="image-20230812122503629" tabindex="0" loading="lazy"><figcaption>image-20230812122503629</figcaption></figure><ul><li>此结构主要有以下改进 <ul><li>一层block就包含1*1卷积，3*3卷积，5*5卷积，3*3池化。网络中每一层都能学习到“稀疏”（3*3、5*5）”不稀疏“（1*1）的特征，既增加了网络的宽度，也增加了网络对尺度的适应性</li><li>通过concat在每个block后面合成特征，获得非线性属性</li></ul></li></ul><h3 id="inception代码实现" tabindex="-1"><a class="header-anchor" href="#inception代码实现" aria-hidden="true">#</a> Inception代码实现</h3><h4 id="定义基础卷积模型" tabindex="-1"><a class="header-anchor" href="#定义基础卷积模型" aria-hidden="true">#</a> 定义基础卷积模型</h4><ul><li>卷积 + BN + 激活</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BasicConv</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>BasicConv<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义inceptionblock" tabindex="-1"><a class="header-anchor" href="#定义inceptionblock" aria-hidden="true">#</a> 定义InceptionBlock</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">InceptionBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> pool_features<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>InceptionBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>b_1x1 <span class="token operator">=</span> BasicConv<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>				<span class="token comment"># 1x1</span>

        self<span class="token punctuation">.</span>b_3x3_1 <span class="token operator">=</span> BasicConv<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>			<span class="token comment"># 1x1 + 3x3</span>
        self<span class="token punctuation">.</span>b_3x3_2 <span class="token operator">=</span> BasicConv<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>b_5x5_1 <span class="token operator">=</span> BasicConv<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>			<span class="token comment"># 1x1 + 5x5</span>
        self<span class="token punctuation">.</span>b_5x5_2 <span class="token operator">=</span> BasicConv<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>b_pool <span class="token operator">=</span> BasicConv<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> pool_features<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>	<span class="token comment"># 3x3池化 + 1x1</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        b_1x1_out <span class="token operator">=</span> self<span class="token punctuation">.</span>b_1x1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        b_3x3_out <span class="token operator">=</span> self<span class="token punctuation">.</span>b_3x3_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>b_3x3_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        b_5x5_out <span class="token operator">=</span> self<span class="token punctuation">.</span>b_5x5_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>b_5x5_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        b_pool_out <span class="token operator">=</span> self<span class="token punctuation">.</span>b_pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        out <span class="token operator">=</span> <span class="token punctuation">[</span>b_1x1_out<span class="token punctuation">,</span> b_3x3_out<span class="token punctuation">,</span> b_5x5_out<span class="token punctuation">,</span> b_pool_out<span class="token punctuation">]</span> 
        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>out<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>	<span class="token comment"># 合成特征</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inception结构特点" tabindex="-1"><a class="header-anchor" href="#inception结构特点" aria-hidden="true">#</a> Inception结构特点</h3><ul><li><p>在inception结构中，大量采用了1x1的矩阵，主要有两点作用</p><ul><li>对数据进行降维（替代 Linear层）</li><li>引入更多非线性，提高泛化能力，因为卷积后要经过ReLU激活函数</li></ul></li><li><p>著名应用：GoogleNet, InceptionNet v3</p><ul><li><p>GoogleNet是一个22层的深度网络</p></li><li><p>InceptionNet v3的结构主要有五种Inception模块组成</p><ul><li>InceptionA，InceptionB，InceptionB，InceptionD，InceptionE</li></ul></li></ul></li></ul>`,78),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","现代网络架构.html.vue"]]);export{k as default};
