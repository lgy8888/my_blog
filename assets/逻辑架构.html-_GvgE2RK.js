import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as l,c as s,f as a}from"./app-OTaO6_y0.js";const i={},e=a(`<h1 id="逻辑架构" tabindex="-1"><a class="header-anchor" href="#逻辑架构" aria-hidden="true">#</a> 逻辑架构</h1><h2 id="逻辑架构简介" tabindex="-1"><a class="header-anchor" href="#逻辑架构简介" aria-hidden="true">#</a> 逻辑架构简介</h2><p>MySQL的逻辑架构分为3层</p><ol><li><strong>连接层</strong>：与客户端建立连接，完成认证工作，权限的获取和存储</li><li><strong>服务层</strong>：对SQL语句进行分析优化，与数据库文件的存储方式无关</li><li><strong>存储引擎层</strong>：与数据库文件打交道，负责数据的存储和读取</li></ol><h3 id="各层详细说明" tabindex="-1"><a class="header-anchor" href="#各层详细说明" aria-hidden="true">#</a> 各层详细说明</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231212154153528.png" alt="image-20231212154153528" tabindex="0" loading="lazy"><figcaption>image-20231212154153528</figcaption></figure><ol><li><p><strong>连接层</strong>：大多数基于网络的<strong>C/S</strong>（客户端/服务器）都有的架构</p><ul><li>负责连接处理、授权认证、安全等等</li></ul></li><li><p><strong>服务层</strong>：大多数MySQL的核心服务功能都在这一层</p><ul><li><p>包括<strong>查询解析、分析、优化、缓存、以及所有的内置函数</strong>（MySQL8.0永久移除了查询缓存）</p></li><li><p>所有的<strong>跨存储引擎功能</strong>都在这一层实现：存储过程、触发器、视图等</p></li></ul></li><li><p><strong>存储引擎</strong>：存储引擎负责MySQL中数据的存储和提取</p><ul><li>存储引擎有很多种，每个存储引擎都有各自的优势和劣势</li><li><strong>服务器通过API与存储引擎通信</strong>，接口屏蔽了不同存储引擎之间的差异，这些差异对上层的查询过程没有影响</li><li>存储引擎API包含了几十个底层函数，用于执行如“开启一个事务”、“根据主键提取一行记录”等操作</li><li><strong>存储引擎不会解析SQL</strong>，<strong>不同存储引擎之间也不会相互通信</strong>，只是简单的响应上层服务器的请求 <ul><li>InnoDB会解析外键定义，MySQL服务器没有实现这个功能</li></ul></li></ul></li></ol><h3 id="连接管理和安全" tabindex="-1"><a class="header-anchor" href="#连接管理和安全" aria-hidden="true">#</a> 连接管理和安全</h3><blockquote><p>客户端怎么连接</p></blockquote><p>客户端（应用）连接到服务器时，服务器会对其进行认证</p><p>认证基于用户名、原始主机信息、密码</p><ul><li>如果使用了安全套接字（SSL）连接，还可以使用X.509证书认证</li></ul><p>连接成功之后，服务器会继续验证该客户端是否具有执行某个特定查询的权限</p><blockquote><p>客户端连接的线程</p></blockquote><p>每个客户端连接都会在服务器进程中拥有一个线程</p><ul><li>这个连接的查询只会在这个单独的线程中执行</li><li>该线程只能轮流在某个CPU核心或者CPU中运行</li></ul><p>服务器会负责缓存线程，因此不需要为每一个新建的连接创建或者销毁线程</p><h3 id="优化与执行" tabindex="-1"><a class="header-anchor" href="#优化与执行" aria-hidden="true">#</a> 优化与执行</h3><blockquote><p>解析器和优化器</p></blockquote><p>MySQL会解析查询，并创建内部数据结构（解析树），然后对其进行各种优化，包括重写查询、决定表的读取顺序、选择合适的索引等</p><blockquote><p>如何人为优化查询</p></blockquote><p>用户可以根据特殊的关键字提示（hint）优化器，影响它的决策过程</p><p>也可以请求优化器解释（explain）优化过程的各个因素，让用户知道服务器是如何进行优化决策的，</p><ul><li>优化器解释提供一个参考基准，便于用户重构查询和数据库、修改相关配置，使应用尽可能高效</li></ul><blockquote><p>存储引擎对优化查询的影响</p></blockquote><p>优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等</p><ul><li>某些存储引擎的某种索引，可能对特定的查询有优化</li></ul><h2 id="逻辑架构解析" tabindex="-1"><a class="header-anchor" href="#逻辑架构解析" aria-hidden="true">#</a> 逻辑架构解析</h2><blockquote><p>MySQL 5.7经典架构图</p></blockquote><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231212161759149.png" alt="image-20231212161759149" tabindex="0" loading="lazy"><figcaption>image-20231212161759149</figcaption></figure><ul><li>Connectors：MySQL服务器之外的客户端程序（与编程语言相关）</li><li>Management Services &amp; Utilities：基础服务组件</li><li>Connection Pool：连接池，提供了多个用于客户端与服务器进行交互的线程</li><li>SQL Interface：SQL接口，接收SQL指令，返回查询结果</li><li>Parser：解析器，语法解析，语义解析，生成语法树，便于查询优化</li><li>Optimizer：优化器，核心组件，对SQL进行优化</li><li>Caches &amp; Buffers：查询缓存，以Key-Value的方式来缓存查询结果 <ul><li>Key是SQL语句，Value是对应的数据记录</li></ul></li><li>Pluggable Storage Engines：插件式存储引擎，可插（替换）拔的存储引擎，与底层的文件系统进行交互</li><li>File System：文件系统</li><li>Files &amp; Logs：日志文件</li></ul><h3 id="第一层-连接层" tabindex="-1"><a class="header-anchor" href="#第一层-连接层" aria-hidden="true">#</a> 第一层：连接层</h3><p>系统（客户端）访问MySQL 服务器前，做的第一件事就是建立TCP 连接。</p><p>经过三次握手建立连接成功后， MySQL 服务器对TCP 传输过来的账号密码做身份认证、权限获取。</p><ul><li>用户名或密码不对，会收到一个<code>Access denied for user</code>错误，客户端程序结束执行</li><li>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限、</li></ul><p>TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。</p><p>所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><h3 id="第二层-服务层" tabindex="-1"><a class="header-anchor" href="#第二层-服务层" aria-hidden="true">#</a> 第二层：服务层</h3><p><strong>SQL Interface：SQL接口</strong></p><ul><li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT ... FROM就是调用SQL Interface</li><li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定 义函数等多种SQL语言接口</li></ul><p><strong>Parser: 解析器</strong></p><ul><li>在解析器中对 SQL 语句进行<strong>语法分析、语义分析</strong>。将SQL语句<strong>分解成数据结构</strong>，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。</li><li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建<strong>语法树</strong>，并根据数据字典丰富查询语法树，会<strong>验证该客户端是否具有执行该查询的权限</strong>。创建好语法树后，MySQL还会对SQl查询进行语法上的优化，进行查询重写。</li></ul><h2 id="sql的执行过程" tabindex="-1"><a class="header-anchor" href="#sql的执行过程" aria-hidden="true">#</a> SQL的执行过程</h2><h3 id="读sql执行过程" tabindex="-1"><a class="header-anchor" href="#读sql执行过程" aria-hidden="true">#</a> 读SQL执行过程</h3><blockquote><p>查询在MySQL架构中的执行顺序</p></blockquote><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231221155734210.png" alt="image-20231221155734210" tabindex="0" loading="lazy"><figcaption>image-20231221155734210</figcaption></figure><ol><li>客户端发起对服务端的连接</li><li>建立连接，分配一个线程用来处理SQL</li><li>SQL接口接收SQL</li><li>先在查询缓存中是否存在该SQL语句 <ul><li>如果查到了就直接返回</li><li>如果没查到继续走</li></ul></li><li>解析器对SQL语句进行解析，生成语法树 <ul><li>解析器会解析SQL语法是否有问题，有问题就报错</li></ul></li><li>优化器对SQL进行优化，逻辑优化和物理优化</li><li>调用存储引擎中的API，来到文件系统中对数据进行查找</li><li>将数据加载到内存中进行操作</li><li>将查询结果缓存起来</li><li>通过SQL接口将查询结果返回给客户端</li></ol><h4 id="_1-连接器" tabindex="-1"><a class="header-anchor" href="#_1-连接器" aria-hidden="true">#</a> 1. 连接器</h4><p>在 Linux 操作系统里要使用 MySQL，那你第一步肯定是要先<strong>连接 MySQL 服务</strong>，然后才能执行 SQL 语句，主要包括3个步骤</p><ol><li>网络连接</li><li>账密校验</li><li>获取权限</li></ol><h5 id="网络连接" tabindex="-1"><a class="header-anchor" href="#网络连接" aria-hidden="true">#</a> 网络连接</h5><p>普遍都是使用下面这条命令进行连接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -h 指定 MySQL 服务得 IP 地址，如果是连接本地的 MySQL服务，可以不用这个参数；</span>
<span class="token comment"># -u 指定用户名，管理员角色名为 root；</span>
<span class="token comment"># -p 指定密码，如果命令行中不填写密码（为了密码安全，建议不要在命令行写密码），就需要在交互对话里面输入密码</span>
mysql -h<span class="token variable">$ip</span> -u<span class="token variable">$user</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>连接的过程需要先经过 TCP 三次握手</strong>，因为 MySQL 是基于 TCP 协议进行传输的</p><ul><li>如果使用的是UDP，由于UDP是一种无连接的协议，发送方不会在发送数据前与接收方建立连接，所以也就不需要连接MySQL服务</li></ul><blockquote><p>如果MySQL服务没有正常启动，会收到这个报错</p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231220230947352.png" alt="image-20231220230947352" tabindex="0" loading="lazy"><figcaption>image-20231220230947352</figcaption></figure></blockquote><h5 id="账密校验" tabindex="-1"><a class="header-anchor" href="#账密校验" aria-hidden="true">#</a> 账密校验</h5><p>MySQL服务正常运行，执行完TCP连接之后，<strong>连接器就开始验证用户名密码</strong></p><blockquote><p>如果用户名密码验证失败，就会收到Access denied for user报错，如何客户端程序结束执行</p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231220232732299.png" alt="image-20231220232732299" tabindex="0" loading="lazy"><figcaption>image-20231220232732299</figcaption></figure></blockquote><h5 id="获取权限" tabindex="-1"><a class="header-anchor" href="#获取权限" aria-hidden="true">#</a> 获取权限</h5><p>如果用户密码都没有问题，<strong>连接器就会获取该用户的权限</strong></p><p>获取到的权限会保存起来，后续该用户在此连接里的任何操作，都会<strong>基于连接开始时读到的权限进行权限逻辑的判断</strong>。</p><blockquote><p>如果一个用户已经建立了连接，即使管理员中途修改了该用户的权限，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p></blockquote><h5 id="连接相关问题" tabindex="-1"><a class="header-anchor" href="#连接相关问题" aria-hidden="true">#</a> 连接相关问题</h5><h6 id="客户端连接数" tabindex="-1"><a class="header-anchor" href="#客户端连接数" aria-hidden="true">#</a> 客户端连接数</h6><p>执行 <code>show processlist</code> 命令进行查看当前MySQL服务被多少个客户端连接</p><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231220233033057.png" alt="image-20231220233033057" tabindex="0" loading="lazy"><figcaption>image-20231220233033057</figcaption></figure><ul><li>id 为 6 的用户的 Command 列的状态为 <code>Sleep</code> ，这意味着该用户连接完 MySQL 服务就没有再执行过任何命令 <ul><li>也就是说这是一个<strong>空闲的连接</strong>，并且空闲的时长是 736 秒（ Time 列）</li></ul></li></ul><p>MySQL 服务支持的<strong>最大连接数</strong>由 <code>max_connections</code> 参数控制，<strong>超过这个值，系统就会拒绝接下来的连接请求，并报错提示</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Too many connections
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="空闲连接" tabindex="-1"><a class="header-anchor" href="#空闲连接" aria-hidden="true">#</a> 空闲连接</h6><blockquote><p>空闲连接会一直占用着吗？</p></blockquote><p>MySQL 定义了空闲连接的最大空闲时长，由 <code>wait_timeout</code> 参数控制的，默认值是 8 小时（28880秒）</p><p>如果<strong>空闲连接超过了这个时间，连接器就会自动将它断开</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;wait_timeout&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> wait_timeout  <span class="token operator">|</span> <span class="token number">28800</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>kill connection + id</code> 命令可以<strong>手动断开空闲的连接</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">kill</span> connection <span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个处于<strong>空闲状态的连接被服务端主动断开后</strong>，这个<strong>客户端并不会马上知道</strong>，等到客户端在<strong>发起下一个请求的时候</strong>，才会收到这样的<strong>报错</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ERROR 2013 (HY000): Lost connection to MySQL server during query
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="长连接短连接" tabindex="-1"><a class="header-anchor" href="#长连接短连接" aria-hidden="true">#</a> 长连接短连接</h6><p>MySQL 的连接也跟 HTTP 一样，有短连接和长连接的概念</p><ul><li><p><strong>短连接</strong></p><ul><li><p>连接 mysql 服务（TCP 三次握手）</p></li><li><p>执行sql</p></li><li><p>断开 mysql 服务（TCP 四次挥手）</p></li></ul></li><li><p><strong>长连接</strong></p><ul><li><p>连接 mysql 服务（TCP 三次握手）</p></li><li><p>执行sql</p></li><li><p>执行sql</p></li><li><p>执行sql</p></li><li><p>....</p></li><li><p>断开 mysql 服务（TCP 四次挥手）</p></li></ul></li></ul><p>长连接的好处就是可以<strong>减少建立连接和断开连接的过程</strong>，所以一般是推荐使用长连接。</p><p>但是，使用长连接后可能会<strong>占用内存增多</strong></p><ul><li>因为 MySQL 在执行查询过程中临时使用内存管理连接对象，这些连接对象资源只有在连接断开时才会释放。</li><li>如果长连接累计很多，将导致 MySQL 服务占用内存太大，有可能会被系统强制杀掉，这样会发生 MySQL 服务异常重启的现象。</li></ul><blockquote><p>如何解决长连接占用内存的问题？</p></blockquote><p><strong>定期断开长连接</strong></p><ul><li>断开连接后就会释放连接占用的内存资源，定期断开长连接，就是定期释放长连接的资源</li></ul><p><strong>客户端主动重置连接</strong></p><ul><li>MySQL5.7版本实现了<code>mysql_reset_connection()</code>函数的接口(不是命令)</li><li>当客户端执行了一个很大的操作后，在代码里调用该函数来重置连接，达到释放内存的效果</li><li>这个过程不需要重连和重新进行权限验证，但是会将连接恢复到刚刚创建完时的状态 <ul><li>其实就是保持连接，但是清空了这个连接保存着的数据</li><li>比如连接就是加好友，不断聊天就是基于长连接的查询，清空聊天记录来释放空间，没有删好友，就是重置连接</li></ul></li></ul><h4 id="_2-查询缓存" tabindex="-1"><a class="header-anchor" href="#_2-查询缓存" aria-hidden="true">#</a> 2. 查询缓存</h4><p>连接器工作完成后，客户端就可以向 MySQL 服务发送 SQL 语句了</p><p>收到SQL语句后会首先解析出SQL语句的第一个字段，看看是什么类型的语句</p><p>如果是SELECT语句，MySQL就会先去查询缓存（QueryCache）里面查找缓存数据</p><p>查询缓存是以key-value将数据保存在内存中的</p><ul><li>key为SQL</li><li>value为SQL语句的结果</li><li>查询成功的条件为SQL一模一样</li></ul><h5 id="查询缓存的弱点" tabindex="-1"><a class="header-anchor" href="#查询缓存的弱点" aria-hidden="true">#</a> 查询缓存的弱点</h5><p>对于更新比较频繁的表，查询缓存的命中率很低的</p><ul><li>因为只要一个表有更新操作，那么这个表的查询缓存就会被清空</li><li>如果刚缓存了一个查询结果很大的数据，还没被使用的时候，刚好这个表有更新操作，查询缓存就被清空了，相当于白费功夫</li></ul><blockquote><p>MySQL 8.0 版本直接将查询缓存删掉了</p><p>MySQL 8.0 开始，执行一条 SQL 查询语句，不会再走到查询缓存这个阶段了</p><p>对于 MySQL 8.0 之前的版本，如果想关闭查询缓存，我们可以通过将参数 query_cache_type 设置成 DEMAND</p></blockquote><h4 id="_3-解析sql" tabindex="-1"><a class="header-anchor" href="#_3-解析sql" aria-hidden="true">#</a> 3. 解析SQL</h4><p>正式执行SQL查询语句之前，MySQL会先对SQL语句做解析</p><p>解析器会做两件事情</p><ul><li>词法分析</li><li>语法分析</li></ul><h5 id="词法分析" tabindex="-1"><a class="header-anchor" href="#词法分析" aria-hidden="true">#</a> 词法分析</h5><ul><li>例如，SQL语句 select username from userinfo</li><li>在分析之后，会得到4个Token，其中有2个Keyword，分别为select和from</li></ul><table><thead><tr><th>关键字</th><th>非关键字</th><th>关键字</th><th>非关键字</th></tr></thead><tbody><tr><td>SELECT</td><td>username</td><td>FROM</td><td>userinfo</td></tr></tbody></table><p>如果输入的SQL语句语法不对，会在解析器阶段报错</p><ul><li><p>例如，将from写成form</p></li><li><p>会报以下错误</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token keyword">in</span> your SQL syntax<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="语法分析" tabindex="-1"><a class="header-anchor" href="#语法分析" aria-hidden="true">#</a> 语法分析</h5><ul><li>根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法</li><li>如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231221012500971.png" alt="image-20231221012500971" tabindex="0" loading="lazy"><figcaption>image-20231221012500971</figcaption></figure><h4 id="_4-执行sql" tabindex="-1"><a class="header-anchor" href="#_4-执行sql" aria-hidden="true">#</a> 4. 执行SQL</h4><p>经过解析器后，接着就要进入执行 SQL 查询语句的流程了</p><p>每条<code>SELECT</code> 查询语句流程主要可以分为下面这三个阶段：</p><ul><li>prepare 阶段，也就是预处理阶段；</li><li>optimize 阶段，也就是优化阶段；</li><li>execute 阶段，也就是执行阶段；</li></ul><h5 id="预处理器" tabindex="-1"><a class="header-anchor" href="#预处理器" aria-hidden="true">#</a> 预处理器</h5><ul><li>检查SQL查询语句中的表或者字段是否存在</li><li>将<code>SELECT * </code>中的<code>*</code>符号扩展为表上的所有列</li></ul><h5 id="优化器" tabindex="-1"><a class="header-anchor" href="#优化器" aria-hidden="true">#</a> 优化器</h5><ul><li>将SQL查询语句的执行方案确定下来</li><li>例如：表中有多个索引，优化器会基于查询成本的考虑来决定选怎使用哪个索引</li></ul><blockquote><p>想知道优化器使用了哪个索引，可以在查询语句前面加个<code>EXPLAIN</code>命令，这样输出的就是SQL语句的执行计划</p><ul><li>key = NULL 说明没有使用索引，这就会导致全表扫描</li><li>type = ALL 就是全表扫描，这种鞥查询扫描的方式是效率最低档次的</li></ul></blockquote><p>例子：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">AND</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;i%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>这条查询语句既可以使用主键索引，也可以使用普通索引，但是执行的效率会不同</li><li>这条查询语句是覆盖索引，直接在二级索引救恩那个找到结果，也就没必要用主键索引查找了 <ul><li>因为二级索引的B+树的叶子节点的数据存储的是主键值</li></ul></li><li>查询主键索引的B+树成本比查询二级索引的B+树成本大</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231221110637117.png" alt="image-20231221110637117" tabindex="0" loading="lazy"><figcaption>image-20231221110637117</figcaption></figure><ul><li>key = idx_name 说明使用了名字为idx_name的普通索引</li><li>Extra = Using index 说明使用了覆盖索引优化</li></ul><h5 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器" aria-hidden="true">#</a> 执行器</h5><p>执行器与存储引擎交互，交互是以记录为单位的</p><blockquote><p>InooDB存储引擎在查询前会先看一下Buffer Pool里面有没有需要的数据页，有就直接拿来用了</p></blockquote><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231221160615018.png" alt="image-20231221160615018" tabindex="0" loading="lazy"><figcaption>image-20231221160615018</figcaption></figure><p>执行器与存储引擎的三种交互方式</p><ul><li>主键索引查询</li><li>全表扫描</li><li>索引下推</li></ul><h6 id="主键索引查询" tabindex="-1"><a class="header-anchor" href="#主键索引查询" aria-hidden="true">#</a> 主键索引查询</h6><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>执行计划</p><ul><li><p>这条查询语句的查询条件用到了主键索引，而且是等值查询，同时主键 id 是唯一，不会有 id 相同的记录</p></li><li><p>优化器决定选用访问类型为 const 进行查询，也就是使用主键索引查询一条记录</p></li></ul></li><li><p>执行器与存储引擎的执行流程</p><ul><li>执行器<strong>第一次查询</strong>，会调用 <strong><code>read_first_record</code> 函数</strong>指针指向的函数 <ul><li>因为优化器选择的访问类型为 <strong>const</strong>，这个函数指针被指向为 InnoDB 引擎<strong>索引查询</strong>的接口，把条件 <code>id = 1</code> 交给存储引擎，<strong>让存储引擎定位符合条件的第一条记录</strong>。</li></ul></li><li>存储引擎通过主键索引的 B+ 树结构定位到 <code>id = 1</code>的第一条记录 <ul><li>如果记录是<strong>不存在</strong>的，就会<strong>向执行器上报记录找不到的错误</strong>，然后查询结束</li><li>如果记录是<strong>存在</strong>的，就会<strong>将记录返回给执行器</strong>；</li></ul></li><li>执行器从存储引擎读到记录后，接着<strong>判断记录是否符合查询条件</strong>，如果<strong>符合则发送给客户端</strong>，如果<strong>不符合则跳过该记录</strong>。</li><li>执行器查询的过程是一个 <strong>while 循环，所以还会再查一次</strong><ul><li>但是这次因为<strong>不是第一次查询了</strong>，所以会<strong>调用 read_record 函数</strong>指针指向的函数</li><li>因为优化器选择的访问类型为 <strong>const</strong>，这个函数指针<strong>被指向为一个永远返回 - 1 的函数</strong></li><li>所以当调用该函数的时候，执行器就退出循环，也就是结束查询了。</li></ul></li></ul></li></ul><h6 id="全表扫描" tabindex="-1"><a class="header-anchor" href="#全表扫描" aria-hidden="true">#</a> 全表扫描</h6><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;iPhone&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>执行计划 <ul><li>这条查询语句的查询条件没有用到索引</li><li>优化器决定选用访问类型为 ALL 进行查询，也就是全表扫描的方式查询</li></ul></li><li>执行器与存储引擎的执行流程 <ul><li>执行器<strong>第一次查询</strong>，会调用 <strong><code>read_first_record</code> 函数</strong>指针指向的函数 <ul><li>因为优化器选择的访问类型为 <strong><code>all</code></strong>，这个函数指针被指向为 InnoDB 引擎<strong>全扫描</strong>的接口，<strong>让存储引擎读取表中的第一条记录</strong></li></ul></li><li><strong>执行器</strong>会<strong>判断</strong>读到的这条记录的 name 是不是 iphone <ul><li>如果<strong>不是则跳过</strong>；</li><li>如果<strong>是则将记录发给客户</strong><ul><li>Server 层每从存储引擎读到一条记录就会发送给客户端</li><li>之所以客户端显示的时候是直接显示所有记录的，是因为<strong>客户端是等查询语句查询完成后，才会显示出所有的记录</strong></li></ul></li></ul></li><li>执行器查询的过程是一个 <strong>while 循环</strong>，所以<strong>还会再查一次</strong><ul><li><strong>调用 read_record 函数</strong>指针指向的函数</li><li>因为优化器选择的访问类型为 <strong>all</strong>，read_record <strong>函数指针指向的还是 InnoDB 引擎全扫描的接口</strong></li><li>接着向存储引擎层要求<strong>继续读刚才那条记录的下一条记录</strong></li><li>存储引擎把下一条记录取出后就将其返回给执行器（Server层）</li><li>执行器继续判断条件，不符合查询条件即跳过该记录，否则发送到客户端；</li></ul></li><li>一直重复上述过程，直到存储引擎把表中的所有记录读完，然后向执行器（Server层） 返回了读取完毕的信息；</li><li>执行器收到存储引擎报告的查询完毕的信息，退出循环，停止查询。</li></ul></li></ul><h6 id="索引下推" tabindex="-1"><a class="header-anchor" href="#索引下推" aria-hidden="true">#</a> 索引下推</h6><blockquote><p>索引下推是MySQL5.6推出的查询优化策略</p></blockquote><p>索引下推能够减少<strong>二级索引</strong>在查询时的回表操作，提高查询的效率，因为它将 Server 层部分负责的事情，交给存储引擎层去处理了。</p><p><strong>联合索引当遇到范围查询（&gt;或&lt;，不包括between和like）的时候就会停止匹配</strong>，也就是age字段能用到联合索引，但是reward字段无法利用到索引</p><ul><li>联合索引是按照从左到右的索引键来构建有序的B+树的</li><li>意思是，在（a,b）联合索引中，a是全局有序的，b是全局无序的，但是当a相等的时候，取出来的记录中，b就是有序的了</li><li>所以说age联合索引遇到范围查询就会停止匹配了，因为范围查询出来的reward是无序的，需要遍历扫描</li><li>此时就可以<strong>使用索引下推来减少无效的回表次数</strong></li></ul><p><strong><u>不使用索引下推时</u>，执行器与存储引擎的执行流程</strong></p><ul><li>Server层首先<strong>调用存储引擎的接口定位到满足查询条件的第一条二级索引记录</strong>，也就是定位到age &gt; 20的第一条记录</li><li><strong>存储引擎根据二级索引的 B+ 树</strong>快速定位到这条记录后，<strong>获取主键值</strong>，然后<strong>进行回表操作</strong>，将完整的记录返回给 Server 层；</li><li>Server 层<strong>判断记录是否符合条件</strong>，也就是判断该记录的 reward 是否等于 100000 <ul><li>如果<strong>成立则将其发送给客户端</strong></li><li>如果<strong>不成立则跳过该记录</strong></li></ul></li><li><strong>循环</strong>上述步骤，直到存储引擎将表中所有的记录读完</li></ul><p><strong><u>使用索引下推时</u>，执行器与存储引擎的执行流程</strong></p><ul><li>Server层首先<strong>调用存储引擎的接口定位到满足查询条件的第一条二级索引记录</strong>，也就是定位到age &gt; 20的第一条记录</li><li>存储引擎<strong>定位到二级索引后</strong>，<strong>判断一下该索引中包含的列</strong>（reward列）的<strong>条件</strong>（reward 是否等于 100000）<strong>是否成立</strong><ul><li>如果<strong>成立</strong>，则<strong>执行回表</strong>操作，将完成记录返回给 Server 层。</li><li>如果<strong>条件不成立</strong>，则直接<strong>跳过该二级索引</strong></li></ul></li></ul><ul><li><strong>循环</strong>上述步骤，直到存储引擎把表中的所有记录读完</li></ul><blockquote><p>当你发现执行计划里的 Extra 部分显示了 <code>Using index condition</code>，说明使用了索引下推</p></blockquote><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231221135948625.png" alt="image-20231221135948625" tabindex="0" loading="lazy"><figcaption>image-20231221135948625</figcaption></figure><blockquote><p>用不用索引下推有什么区别？</p></blockquote><ul><li>没用索引下推的时候，每查一条二级索引记录，都要进行回表操作，然后将记录返回给Server，让Server去判断下一个条件是否满足</li><li>使用索引下推的时候，判断记录是否满足第二个条件的工作交给存储引擎层实现，满足之后再去回表，保证每次回表都是有效的记录</li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><ol><li>连接器：网络连接，校验账密，获取权限</li><li>查询缓存：key存SQL，value存记录</li><li>解析SQL <ol><li>词法解析——关键词是哪些，有没有拼写错误</li><li>语法解析——语法顺序对不对，有没有语法错误</li><li>构建语法树</li></ol></li><li>执行SQL <ol><li>预处理SQL——检查SQL是否存在表中没有的字段；将*替换成表中所有的字段</li><li>优化SQL——指定执行计划（用哪个索引）</li><li>执行SQL——调用存储引擎的接口 <ol><li>主键索引查询</li><li>全表查询</li><li>索引下推</li></ol></li></ol></li></ol><h3 id="写sql执行过程" tabindex="-1"><a class="header-anchor" href="#写sql执行过程" aria-hidden="true">#</a> 写SQL执行过程</h3><blockquote><p>基于InnoDB</p></blockquote><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231221140722475.png" alt="image-20231221140722475" tabindex="0" loading="lazy"><figcaption>image-20231221140722475</figcaption></figure><ol><li>将<strong>SQL发送给SQL接口</strong>，SQL接口会对SQL语句进行哈希处理</li><li>在缓存中根据哈希值检索数据，如果缓存中<strong>有对应要操作的表</strong>，<strong>删除该表所有缓存</strong></li><li>将<strong>SQL交给解析器</strong>，解析器进行词法语法解析并构建语法树 <ul><li>正确：将SQL交给优化器</li><li>错误：报错</li></ul></li><li><strong>优化器</strong>根据SQL决定最优的<strong>执行计划</strong></li><li><strong>执行开始前</strong>，<strong>记录undo-log和redo-log</strong>（prepare状态）</li><li>在<strong>缓冲区中查找是否存在当前要操作的行记录或表数据</strong><ul><li>存在 <ol><li><strong>对缓冲区中的数据进行操作</strong></li><li>利用checkpoint机制刷写到磁盘 <ul><li>刷盘是异步的，不一定立马刷盘，满足刷盘策略再刷</li><li>线程完成数据操作之后直接往下走</li></ul></li></ol></li><li>不存在 <ul><li>如果操作的是<strong>有唯一约束的字段</strong><ol><li>根据执行计划，调用存储引擎接口，<strong>将磁盘中的数据读到内存中</strong></li><li><strong>在内存中对数据进行操作</strong></li></ol></li><li>如果操作的是<strong>普通字段</strong><ol><li><strong>将操作放进change buffer中</strong>，然后返回</li><li>下次有针对该数据的查询的，让查询的线程从磁盘拿出页，<strong>页拿出来后先执行change buffer中的操作，再取数据</strong></li></ol></li></ul></li><li><strong>更新之后不会立马刷盘</strong>，得<strong>等待满足刷盘条件之后</strong>，<strong>才会</strong>将缓冲区中的数据<strong>刷入磁盘</strong></li></ul></li><li><strong>写操作完成之后</strong>，<strong>记录bin-log日志</strong>，同时<strong>将redo-log日志标记为commit状态</strong></li><li>将<strong>SQL执行消耗</strong>及<strong>操作成功的结果返回给SQL接口</strong>，SQL接口返回给客户端</li></ol><h3 id="写操作vs读操作" tabindex="-1"><a class="header-anchor" href="#写操作vs读操作" aria-hidden="true">#</a> 写操作VS读操作</h3><ol><li><strong>查询缓存</strong>：写操作是删缓存，读操作是查缓存</li><li><strong>执行开始前</strong>：写操作需要记录undo-log日志和redo-log日志，读操作开始前不需要记录日志</li><li><strong>存储引擎</strong>：写操作和读操作都需要在缓冲区中查询是否有要操作的数据页， <ul><li>写操作查到了直接改，读操作查到了直接返回</li><li>写操作查不到需要分情况看是否有必要去磁盘里面拿出来写，读操作拿不到直接进磁盘找</li></ul></li></ol><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20231221160244463.png" alt="image-20231221160244463" tabindex="0" loading="lazy"><figcaption>image-20231221160244463</figcaption></figure><ol start="4"><li><strong>执行结束后</strong>：写操作需要记录bin-log日志，读操作看查询执行的时间久不久，久的话就记录慢查询日志</li></ol><ul><li>因为慢查询SQL耗时长，会引起响应缓慢的问题，所以当一条SQL执行时间过长，就会被&quot;记录在案&quot;，会记录到慢查询日志中</li></ul><ol start="5"><li><strong>SQL接口返回</strong>：写操作返回的是SQL执行消耗以及受影响的行数，读操作返回的是读到的记录</li></ol><h2 id="sql的返回过程" tabindex="-1"><a class="header-anchor" href="#sql的返回过程" aria-hidden="true">#</a> SQL的返回过程</h2><h3 id="读sql" tabindex="-1"><a class="header-anchor" href="#读sql" aria-hidden="true">#</a> 读SQL</h3><ul><li>数据是逐条返回到<strong>SQL接口</strong>的，如果等待所有数据全部查询出来再一次性返回，有可能会导致内存被撑满。</li><li>在SQL接口中，还需要对这些数据进行<strong>再次处理</strong>。</li><li>就算没有查询到数据，也会将执行状态、执行耗时这些信息返回给<code>SQL</code>接口，然后由<code>SQL</code>接口向客户端返回<code>NULL</code>。</li></ul><blockquote><p>例如</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> user_id <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_user<span class="token punctuation">\`</span></span> <span class="token keyword">WHERE</span> user_sex <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span> <span class="token operator">AND</span> user_name <span class="token operator">=</span> <span class="token string">&quot;竹子④号&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>这条<code>SQL</code>要求返回的结果字段仅有一个<code>user_id</code>，但在磁盘中检索数据时，会将整条行数据全部查询出来</li><li>从行记录中筛选出最终所需的结果字段，这个工作是在<code>SQL</code>接口中完成的</li><li>包括多表联查时，数据的合并工作，同样也是在<code>SQL</code>接口完成，其他<code>SQL</code>亦是同理</li></ul><h3 id="写sql" tabindex="-1"><a class="header-anchor" href="#写sql" aria-hidden="true">#</a> 写SQL</h3><ul><li>写类型的操作执行完成之后，仅会返回执行状态、受影响的行数以及执行耗时</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">\`</span>zz_user<span class="token punctuation">\`</span></span> <span class="token keyword">SET</span> user_sex <span class="token operator">=</span> <span class="token string">&quot;女&quot;</span> <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Query OK, 1 row affected (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>最终返回给客户端的则只有「受影响的行数」</li><li>如果写<code>SQL</code>执行成功，这个值一般都会大于<code>0</code>，反之则会等于<code>0</code>。</li></ul><hr>`,177),o=[e];function r(t,d){return l(),s("div",null,o)}const c=n(i,[["render",r],["__file","逻辑架构.html.vue"]]);export{c as default};
