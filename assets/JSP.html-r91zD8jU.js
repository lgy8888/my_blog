import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,f as e}from"./app-OTaO6_y0.js";const t={},i=e(`<h1 id="jsp" tabindex="-1"><a class="header-anchor" href="#jsp" aria-hidden="true">#</a> JSP</h1><h2 id="jsp简介" tabindex="-1"><a class="header-anchor" href="#jsp简介" aria-hidden="true">#</a> JSP简介</h2><ul><li>概念：JavaServerPages Java服务端页面</li><li>一种动态的网页技术，其中可以定义HTML，JS，CSS等静态内容， 还可以定义Java代码的动态内容</li><li>JSP = HTML + Java</li><li>JSP的作用：简化开发，避免了在Servlet中直接输出HTML标签</li></ul><h2 id="jsp快速入门" tabindex="-1"><a class="header-anchor" href="#jsp快速入门" aria-hidden="true">#</a> JSP快速入门</h2><ul><li><p>导入JSP坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建JSP文件</p></li><li><p>编写HTML标签和 Java代码</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;body&gt;
    &lt;h1&gt;hello jsp&lt;/h1&gt;
    &lt;%System.out.println(&quot;hello jsp~&quot;);%&gt;
&lt;/body&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="jsp原理" tabindex="-1"><a class="header-anchor" href="#jsp原理" aria-hidden="true">#</a> JSP原理</h2><ul><li>JSP本质上就是个Servlet</li><li>JSP在被访问时，由JSP容器（Tomcat）将其转换为Java文件（Servlet），再由JSP容器（Tomcat）将其编译，最终对外提供服务的其实是这个字节码文件</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230307091902135.png" alt="image-20230308203457875" tabindex="0" loading="lazy"><figcaption>image-20230308203457875</figcaption></figure><h2 id="jsp脚本" tabindex="-1"><a class="header-anchor" href="#jsp脚本" aria-hidden="true">#</a> JSP脚本</h2><ul><li>JSP脚本用于JSP页面内定义Java代码</li></ul><h3 id="小脚本" tabindex="-1"><a class="header-anchor" href="#小脚本" aria-hidden="true">#</a> 小脚本</h3><ul><li><code>&lt;% %&gt;</code> JSP小脚本： <ul><li>是嵌入到JSP中的Java代码段</li><li>内容会被直接放在<code>jspService()</code>方法中</li><li>每次访问页面时都被执行</li></ul></li></ul><h3 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h3><ul><li><code>&lt;%= %&gt;</code>JSP表达式： <ul><li>是嵌入到HTML的输出中</li><li>内容会被放到<code>out.print()</code>中，作为<code>out.print()</code>的参数</li><li>每次访问页面时都会计算表达式</li><li>不能以<code>;</code>结尾，<code>%</code>和<code>=</code>之间不能有空格</li></ul></li></ul><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h3><ul><li><code>&lt;%! %&gt;</code>JSP声明： <ul><li>用来在JSP页面中声明变量和方法的</li><li>内容会被放到<code>jspService()</code>方法之外，被类直接包含</li></ul></li></ul><h2 id="jsp指令" tabindex="-1"><a class="header-anchor" href="#jsp指令" aria-hidden="true">#</a> JSP指令</h2><ul><li>向容器提供关于JSP页面的总体信息</li><li>格式<code>&lt;%@ %&gt;</code></li></ul><h3 id="page指令" tabindex="-1"><a class="header-anchor" href="#page指令" aria-hidden="true">#</a> page指令</h3><ul><li><p>page指令通知容器关于JSP页面的总体特性</p></li><li><p><code>&lt;@page contentType=&quot;text/html;charset=utf-8&quot;%&gt;</code></p></li><li><p>该指令用来通知容器页面输出的内容类型和使用的字符集</p></li></ul><h3 id="include指令" tabindex="-1"><a class="header-anchor" href="#include指令" aria-hidden="true">#</a> include指令</h3><ul><li>include指令实现把另一个文件（HTML/JSP…）的内容包含到当前页面中</li><li><code>&lt;@include file=&quot;copyright.html&quot;%&gt;</code></li></ul><h3 id="taglib指令" tabindex="-1"><a class="header-anchor" href="#taglib指令" aria-hidden="true">#</a> taglib指令</h3><ul><li>taglib指令用来指定在JSP页面中使用标准标签或自定义标签的前缀与标签库的URI</li><li><code>&lt;%@taglib prefix=&quot;demo&quot; uri=&quot;/WEB-INF/mytaglib.tld&quot;%&gt;</code></li></ul><h2 id="jsp动作" tabindex="-1"><a class="header-anchor" href="#jsp动作" aria-hidden="true">#</a> JSP动作</h2><ul><li>一般语法：<code>&lt;prefix:actionName attribute-list/&gt;</code></li><li>动作是一种标签，在动作标签中，prefix为前缀名，actionName为动作名，attribute-list表示针对该动作的一个或多个属性</li></ul><h2 id="include" tabindex="-1"><a class="header-anchor" href="#include" aria-hidden="true">#</a> include</h2><h3 id="静态包含" tabindex="-1"><a class="header-anchor" href="#静态包含" aria-hidden="true">#</a> 静态包含</h3><ul><li><strong>include指令</strong></li><li><code>&lt;@include file=&quot;URL&quot;%&gt;</code></li><li>编译时将页面插入到当前页面中</li><li><code>file</code>：include指令的唯一属性，用于指定插入的资源路径。 <ul><li>使用相对路径指定，类型可以是任何基于文本的文件（HTML,XML,JSP,txt）</li></ul></li><li>用处： <ul><li>一般用于对重复部件的复用，如页眉（header）、页脚（footer），菜单栏，导航栏（menu）等</li><li>能提高网页的可维护性和可拓展性</li></ul></li></ul><h3 id="动态包含" tabindex="-1"><a class="header-anchor" href="#动态包含" aria-hidden="true">#</a> 动态包含</h3><ul><li><strong>include动作</strong></li><li><code>&lt;jsp:include page=&quot;URL&quot;/&gt;</code></li><li>运行时将页面动态加载到当前页面上</li><li><code>page</code>：制定了被包含的URL地址，其值可以是相对或绝对路径，也可以是EL表达式</li><li>优点：可以动态决定是否加载该资源，实现更加灵活的页面</li><li>缺点：增加复杂度和运行开销</li></ul><h2 id="jsp隐含变量" tabindex="-1"><a class="header-anchor" href="#jsp隐含变量" aria-hidden="true">#</a> JSP隐含变量</h2><ul><li><code>application</code>：引用web应用程序的上下文</li><li><code>session</code>：引用用户会话</li><li><code>request</code>：引用页面的当前请求对象</li><li><code>response</code>：用来向客户发送一个响应</li><li><code>out</code>：引用页面输出流</li><li><code>page</code>：引用页面的Servlet实例</li><li><code>pageContext</code>：引用页面的上下文</li><li><code>config</code>：引用Servlet的配置</li><li><code>exception</code>：用来处理错误</li></ul><h2 id="jsp生命周期" tabindex="-1"><a class="header-anchor" href="#jsp生命周期" aria-hidden="true">#</a> JSP生命周期</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这三个方法等价于Servlet的<code>init(),service(),destroy()</code>方法</li></ul><h2 id="jsp缺点" tabindex="-1"><a class="header-anchor" href="#jsp缺点" aria-hidden="true">#</a> JSP缺点</h2><p>由于JSP页面内，既可以定义HTML标签，又可以定义JAVA代码，造成了以下问题</p><ul><li>书写麻烦</li><li>阅读麻烦</li><li>复杂度高：运行需要依赖各种环境，JRE, JSP容器，JavaEE……</li><li>占内存和磁盘：JSP会自动生成.java和.class文件占磁盘，运行是.class文件占内存</li><li>调试困难：出错后，需要找到制动生成的.java文件进行调试</li><li>不利于团队协作：前端不会Java，后端不会HTML</li></ul><h2 id="el表达式" tabindex="-1"><a class="header-anchor" href="#el表达式" aria-hidden="true">#</a> EL表达式</h2><ul><li>Expression Language 表达式语言，用于简化JSP页面的Java代码</li><li>主要功能：获取数据</li><li>语法：<code>\${expression}</code><ul><li>eg：<code>\${brand}</code></li></ul></li><li>Javaweb中四大域对象 <ul><li>page：当前页面有效</li><li><strong>request</strong>：当前请求有效</li><li><strong>session</strong>：当前会话有效</li><li>application：当前应用有效</li></ul></li><li>EL表达式获取数据，会依次从这四个域中寻找，直到找到为止</li></ul><h2 id="jstl标签" tabindex="-1"><a class="header-anchor" href="#jstl标签" aria-hidden="true">#</a> JSTL标签</h2><ul><li><p>JSP标准标签库（Jsp Stanarded Tag Library），使用标签取代JSP页面上的Java代码</p></li><li><p>导入坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在JSP页面上引入JSTL标签库</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;!--if判断--&gt;
&lt;c:if test=&quot;条件&quot;&gt;&lt;/c:if&gt; 
&lt;c:if test=&quot;\${status==1}&quot;&gt;启用&lt;/c:if&gt;
&lt;c:if test=&quot;\${status==0}&quot;&gt;禁用&lt;/c:if&gt;

&lt;!--for循环--&gt;
&lt;c:forEach items=&quot;被遍历的容器&quot; var=&quot;遍历产生的临时变量&quot; varStatus=&quot;遍历状态对象&quot;&gt;&lt;/c:forEach&gt;
&lt;c:forEach begin=&quot;开始数&quot; end=&quot;结束数&quot; step=&quot;步长&quot; var=&quot;遍历产生的临时变量&quot;&gt;&lt;/c:forEach&gt;

&lt;c:forEach items=&quot;\${brands}&quot; var=&quot;brand&quot;&gt;
	&lt;tr align=&quot;center&quot;&gt;
    	&lt;td&gt;\${brand.id}&lt;/td&gt;
    	&lt;td&gt;\${brand.brandName}&lt;/td&gt;
        &lt;td&gt;\${brand.companyName}&lt;/td&gt;
        &lt;td&gt;\${brand.description}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/c:forEach&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="mvc模式和三层架构" tabindex="-1"><a class="header-anchor" href="#mvc模式和三层架构" aria-hidden="true">#</a> MVC模式和三层架构</h2><h3 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h3><ul><li>MVC是一种分层开发的模式 <ul><li>Model：业务模型，处理业务 -&gt; <code>JavaBean</code></li><li>View：视图，界面展示 -&gt; <code>JSP</code></li><li>Controller：控制器，处理请求，调用模型和视图 -&gt; <code>Servlet</code></li></ul></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230308222041220.png" alt="image-20230308222041220" tabindex="0" loading="lazy"><figcaption>image-20230308222041220</figcaption></figure><h3 id="三层架构" tabindex="-1"><a class="header-anchor" href="#三层架构" aria-hidden="true">#</a> 三层架构</h3><ul><li><strong>数据访问层</strong>（dao/mapper）：对数据库的CRUD基本操作 -&gt; <code>SpringMVC/Strits2</code></li><li><strong>业务逻辑层</strong>（service）：对业务逻辑进行分装，组合数据访问层中的基本功能，形成复杂的业务逻辑功能 -&gt; <code>Spring</code></li><li><strong>表现层</strong>（web/controller）：接受请求，封装数据，调用业务逻辑层，响应数据 -&gt; <code>MyBatis/Hibername</code></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230309144927249.png" alt="image-20230308222509852" tabindex="0" loading="lazy"><figcaption>image-20230308222509852</figcaption></figure><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><ul><li>创建新的模块，引入坐标（<code>mysql,mybatis,servlet,jsp,jstl,standard,tomcat7插件</code>）</li><li>创建三层架构的包结构（<code>mapper,pojo,service,utils,web</code>）</li><li>准备数据库</li><li>准备实体类</li><li>MyBatis基础环境（<code>MyBatis-config.xml,Mapper.xml,Mapper接口</code>）</li></ul><h2 id="查询所有" tabindex="-1"><a class="header-anchor" href="#查询所有" aria-hidden="true">#</a> 查询所有</h2><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230308222509852.png" alt="image-20230309144927249" tabindex="0" loading="lazy"><figcaption>image-20230309144927249</figcaption></figure><h2 id="添加数据" tabindex="-1"><a class="header-anchor" href="#添加数据" aria-hidden="true">#</a> 添加数据</h2><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230309144956987.png" alt="image-20230309144956987" tabindex="0" loading="lazy"><figcaption>image-20230309144956987</figcaption></figure><h2 id="回显数据" tabindex="-1"><a class="header-anchor" href="#回显数据" aria-hidden="true">#</a> 回显数据</h2><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230309152252546.png" alt="image-20230309145047320" tabindex="0" loading="lazy"><figcaption>image-20230309145047320</figcaption></figure><h2 id="修改数据" tabindex="-1"><a class="header-anchor" href="#修改数据" aria-hidden="true">#</a> 修改数据</h2><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230309145047320.png" alt="image-20230309145133491" tabindex="0" loading="lazy"><figcaption>image-20230309145133491</figcaption></figure>`,61),l=[i];function c(o,p){return n(),s("div",null,l)}const r=a(t,[["render",c],["__file","JSP.html.vue"]]);export{r as default};
