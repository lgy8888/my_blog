import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as l,f as a}from"./app-OTaO6_y0.js";const r={},d=a('<h1 id="文本与注意力" tabindex="-1"><a class="header-anchor" href="#文本与注意力" aria-hidden="true">#</a> 文本与注意力</h1><h2 id="rnn其他应用" tabindex="-1"><a class="header-anchor" href="#rnn其他应用" aria-hidden="true">#</a> RNN其他应用</h2><ul><li>关键字提取（many to one） <ul><li>将一段话作为序列输入网络，输出只取最后一个状态，用它来表示这句话的关键字</li></ul></li><li>手写数字识别（many to many） <ul><li>输入与输出都是序列，一般是定长的</li><li>模型设计上，利用RNN单元在每个时间步上的输出得到序列结果</li></ul></li><li><strong>seq2seq</strong><ul><li>一般是机器翻译的任务中出现，将一句中文翻译成英文，那么这句英文的长度有可能会比中文短，也有可能会比中文长，所以这时候输出的长度就不确定了，需要用序列到序列的模型来解决这个问题</li><li>聊天机器人和问答系统也都是同样的原理，将句子输入，输出是根据前面的输入来得到</li></ul></li></ul><h2 id="seq2seq" tabindex="-1"><a class="header-anchor" href="#seq2seq" aria-hidden="true">#</a> Seq2Seq</h2><h3 id="seq2seq的构成" tabindex="-1"><a class="header-anchor" href="#seq2seq的构成" aria-hidden="true">#</a> Seq2Seq的构成</h3><ul><li>Seq2Seq任务包含两部分：编码器（Encoder）和解码器（Decoder） <ul><li>编码器负责吧文本序列转换为隐含表示，解码器负责把隐含表示还原成另一个文本序列</li><li>在这里，编码器和解码器的任务都能使用循环神经网络来实现</li></ul></li></ul><h3 id="seq2seq结构" tabindex="-1"><a class="header-anchor" href="#seq2seq结构" aria-hidden="true">#</a> Seq2Seq结构</h3><ul><li>编码器Encoder把所有的输入序列都编码成一个统一的语义向量Context，然后再由解码器Decoder解码</li><li>在解码器Decoder解码的过程中，不断的将前一个输出作为后一个时刻的输入，循环解码，知道输出停止符为止</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230901084537842.png" alt="image-20230901080225600" tabindex="0" loading="lazy"><figcaption>image-20230901080225600</figcaption></figure><h3 id="seq2seq任务流程" tabindex="-1"><a class="header-anchor" href="#seq2seq任务流程" aria-hidden="true">#</a> Seq2Seq任务流程</h3><ul><li><p>首先，解码器输入一个特殊的单词，即句子开头的单词对应的词向量（这个特殊的单词一般标记为<code>&lt;SOS&gt;</code>，即<code>StartOfSentence</code>），输出第一个预测的单词。</p></li><li><p>然后根据第一个预测的单词获取对应的词向量，进行第二个单词的预测</p></li><li><p>不断重复这个过程，直到到达最大预测长度或者预测得到另一个特殊单词（这个特殊的单词一般标记为<code>&lt;EOS&gt;</code>，即<code>EndOfSentence</code>），整个解码过程结束</p></li><li><p>Seq2Seq解码过程对应的解码模型称为自回归模型（Autoregressive model）</p></li><li><p>与经典RNN结构不同的是，Seq2Seq结构不再要求输入和输出序列有相同的时间长度，他能够输出任意长的序列</p></li></ul><h3 id="seq2seq缺陷" tabindex="-1"><a class="header-anchor" href="#seq2seq缺陷" aria-hidden="true">#</a> Seq2Seq缺陷</h3><ul><li><p>Seq2Seq模型能够用于很多任务，比如机器翻译，编码器对应的是源语言的文本序列，解码器对应的是目标语言的文本序列和文本归纳</p></li><li><p>也可用于文本摘要，编码器对应的是段落的文本序列，解码器对应的是文本摘要</p></li><li><p>但是，由于RNN 的特性，对于很长的序列，RNN（包括LSTM,GRU，它们只是在设计上尽量减少遗忘的发生），都<strong>不可避免的出现遗忘的状况</strong></p></li><li><p>这个缺点可以使用引入注意力机制（Attention Mechanism）来解决</p></li></ul><h2 id="注意力机制" tabindex="-1"><a class="header-anchor" href="#注意力机制" aria-hidden="true">#</a> 注意力机制</h2><ul><li>通过引入一个神经网络，计算编码器的输出对解码器贡献的权重，最后对编码器的输出进行加权平均，即上下文（Context）</li><li>通过在编码器的输出和下一步的输入中引入上下文的信息，最后达到让解码器的某一个特定的解码和编码器的一些输出关联起来，即对齐（Alignment）的效果</li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230831205435047.png" alt="image-20230901084537842" tabindex="0" loading="lazy"><figcaption>image-20230901084537842</figcaption></figure><h3 id="注意力机制原理" tabindex="-1"><a class="header-anchor" href="#注意力机制原理" aria-hidden="true">#</a> 注意力机制原理</h3><p>$$ Attention(Q,K,V) = softmax(\\frac{Q*K^T}{\\sqrt{d_K}})V $$</p><ul><li>注意力计算公式： <ul><li>Q：query（查询）</li><li>K：key（键）</li><li>V：value（值）</li></ul></li><li>输入查询Q，用这个查询Q去和所有关键字K做对比，根据其相似性进行匹配 <ul><li>利用向量乘法实现相似性匹配过程（转置是由于Q和K的大小相同，需要转置才能进行乘法），获得相似性的实数值</li><li>要将相似性的实数值转化为相似性，需要将其转化为概率值（0-1），所以用到了softmax函数进行归一化</li><li>除以$\\sqrt{d_K}$是为了防止在取到较大K值的时候，softmax函数会形成一个较小的梯度值，不利于模型训练</li></ul></li><li>匹配后获得的相似性乘上价值V，计算结果就是注意力（Attention）</li></ul><h3 id="使用注意力机制的seq2seq" tabindex="-1"><a class="header-anchor" href="#使用注意力机制的seq2seq" aria-hidden="true">#</a> 使用注意力机制的Seq2Seq</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230812153025996.png" alt="image-20230901164337807" tabindex="0" loading="lazy"><figcaption>image-20230901164337807</figcaption></figure><ul><li><p>左边为编码器右边为解码器</p></li><li><p>编码器对每次词的输出作为key和value（二者是等价的）</p><ul><li>输入编码器的序列有几个时间步，就对应有几个key和value</li></ul></li><li><p>解码器RNN对上一个词的输出是query</p><ul><li>RNN的输出都是在一个语义空间中，所以需要query的选择就是上一个时间步的预测输出</li><li>第一个q可以是占位符</li></ul></li><li><p>注意力的输出和下一个次的词嵌入合并进入解码器RNN</p></li></ul><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230901215919002.png" alt="image-20230901085211806" tabindex="0" loading="lazy"><figcaption>image-20230901085211806</figcaption></figure><h2 id="自注意力机制" tabindex="-1"><a class="header-anchor" href="#自注意力机制" aria-hidden="true">#</a> 自注意力机制</h2><h3 id="循环神经网络的问题" tabindex="-1"><a class="header-anchor" href="#循环神经网络的问题" aria-hidden="true">#</a> 循环神经网络的问题</h3><ul><li><p>循环神经网络结合注意力机制，在长距离时间序列依赖关系的建模上也取得了巨大的成功</p></li><li><p>许多优秀的神经网络翻译模型都是基于注意力机制和Seq2Seq模型来构造的</p></li><li><p>循环神经网络的缺点</p><ul><li>模型的运行效率和代码优化问题 <ul><li>对于循环神经网络来说，由于下一步的计算依赖上一步输出的隐含状态，因此前后计算有相互依赖关系，这就造成了模型不能进行并行化计算</li></ul></li><li>多层神经网络的计算和优化问题 <ul><li>在计算顺序上，下一层的计算依赖于上一层的输入，下一层只有等到上一层有一定输出之后才能进行计算，同时下一层的计算完成也依赖于上一层的计算完成</li><li>这造成了模型优化上的困难</li></ul></li></ul></li><li><p>计算速度上的劣势限制了神经网络的应用</p></li><li><p>计算较长的序列的时候，时间的延迟会对模型的实际应用造成较大的影响</p></li></ul><h3 id="自注意力机制-1" tabindex="-1"><a class="header-anchor" href="#自注意力机制-1" aria-hidden="true">#</a> 自注意力机制</h3><ul><li><p>不需要使用循环神经网络</p></li><li><p>完全使用注意力机制来描述时间序列的上下文相关性</p></li><li><p>自注意力机制的计算涉及序列中某一个输入相对于其他所有输入之间的联系</p></li><li><p>计算中没有先后之分，所以能够很容易进行并行计算</p></li><li><p>在计算过程中主要涉及的是矩阵的乘法</p></li><li><p>模型结构更加简单，方便对模型进行优化，获得更大的加速比</p></li></ul><h3 id="自注意力机制原理" tabindex="-1"><a class="header-anchor" href="#自注意力机制原理" aria-hidden="true">#</a> 自注意力机制原理</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230901085211806.png" alt="image-20230901205439301" tabindex="0" loading="lazy"><figcaption>image-20230901205439301</figcaption></figure><ul><li><p>自注意力机制需要输入三个值</p><ul><li><strong>查询张量（Q），键张量（K），值张量 （V）</strong></li></ul></li><li><p>Q,K,V三个张量的形状为N*T*C，即批次维度，序列的时间长度，序列的特征长度</p></li><li><p>前两个张量（Q,K）的作用是根据查询张量获取每个键张量对应的分数</p></li><li><p>然后根据分数计算出对应的权重</p></li><li><p>用得到的权重乘以值张量（V），并对值张量加权平均，最后输出结果</p></li><li><p><strong>运算步骤</strong></p><ul><li>使用Q,K,V对应的权重矩阵对这三个张量进行线性变换，获取对应变换后的张量</li><li>接下来计算相应的分数和权重，Q,K进行矩阵乘法 <ul><li>在Q,K最后的特征维度相等的情况下，这里相当于使用Q的每个特征对K的每个特征，求二者的相似度</li></ul></li><li>用这个相似度做分数，沿着K做softmax函数来计算具体的权重 <ul><li>如果Q和K相似度越大，那么K对应的分数也越大，同时对应的权重也比较大</li></ul></li></ul></li><li><p>在实践中经常使用多个并行的自注意力机制，成为<strong>多头注意力（Multihead Attention）</strong></p><ul><li>即使用多个注意力矩阵和多个权重对输入值进行加权平均，最后加权平均的结果进行拼接</li></ul></li><li><p>使用多头注意力的原因是单个注意力机制只能捕捉一种序列之间的关联（比如相邻单词的相关性）</p><ul><li>如果使用多头注意力机制，就能捕捉多种系列之间的关联（比如距离比较远的单词之间的相关性）</li><li>最后的拼接通过结合多种注意力机制，就能比较好地描述不同距离单词之间的相互关系</li></ul></li></ul><h2 id="transformer模型" tabindex="-1"><a class="header-anchor" href="#transformer模型" aria-hidden="true">#</a> Transformer模型</h2><ul><li>用自注意力机制执行Seq2Seq任务的模型就叫Transformer模型</li><li>相比于RNN模型，基于自注意力机制的Seq2Seq总体的思路是类似的，只不过把RNN的模块切换成了自注意力模块（Multihead Attention）</li></ul><h3 id="transformer模型结构" tabindex="-1"><a class="header-anchor" href="#transformer模型结构" aria-hidden="true">#</a> Transformer模型结构</h3><figure><img src="http://lgy-markdown-img.oss-cn-guangzhou.aliyuncs.com/image/image-20230901205439301.png" alt="image-20230901215919002" tabindex="0" loading="lazy"><figcaption>image-20230901215919002</figcaption></figure><ul><li>模型第一部分是词嵌入向量的生成 <ul><li>由于自注意力机制中不包含单词的顺序</li><li>如果要构建单词的词向量序列，需要引入单词的顺序相关信息 <ul><li>可以使用周期性的函数来编码单词的顺序，比如：使用不同周期的正弦余弦函数来描述单词的顺序，这种位置编码方式的优点是能够编码任意长度的序列，但缺点是序列的词嵌入需要进行预先计算，需要消耗一定计算时间</li><li>也可以使用位置的嵌入（Positional Encoding）</li></ul></li></ul></li><li>在计算嵌入层之后，进入 自注意力模块（Multi-Head Attention）和全连接模块（Add）的计算，以及归一化（Norm）模块的计算</li><li>对于Transformer模型来说，根据张量输入的是编码器还是解码器，具体的自注意力模块输入有所不同 <ul><li>在编码器中，对于第一个单元，其输入为词向量和位置向量沿着特征方向拼接的结果 <ul><li>对于其他单元，其输入均为前一个单元的输出</li><li>对于编码器的自注意力机制，K,Q,V的输入均为同一个，即词嵌入或上一个模块的输出</li><li>通过自注意力机制得到对应变换以后的输出后，使用两个全连接层（Feed Forward + ReLU）对输出的张量进行神经网络计算</li><li>最后对输出结果和模块的输入求和（残差连接），并对求和结果进行层归一化处理，输出模块的计算结果，这个结果会被保留下来以便进一步运算</li></ul></li><li>在解码器中，基本结构与编码器类似，细节上有所区别 <ul><li>对解码器来说，输入的值（单词嵌入和位置嵌入，或者上一层解码器的输出）首先要经过一个自注意力机制</li><li>就是解码器部分所示的SelfAttn模块（Masked Multi-Head Attention），这个模块的作用是自注意力机制和残差连接，以及最后的层归一化输出</li></ul></li></ul></li></ul><h3 id="pytorch中自注意力机制模块" tabindex="-1"><a class="header-anchor" href="#pytorch中自注意力机制模块" aria-hidden="true">#</a> Pytorch中自注意力机制模块</h3><ul><li>Pytorch本身提供了一系列模块用来完成基于自注意力机制的模型的构建</li><li>其中包含自注意力机制的模块，Transformer编码器和解码器模块</li><li>Pytorch中自带的注意力机制模块是<code>nn.MultiheadAttention</code><ul><li>其默认的序列排列为<code>time_step * Batch * features</code></li></ul></li></ul><h4 id="编码器层和解码器层" tabindex="-1"><a class="header-anchor" href="#编码器层和解码器层" aria-hidden="true">#</a> 编码器层和解码器层</h4><ul><li><p>有了自注意力机制的模块后，就能使用它构造对应的编码器层和解码器层</p><ul><li>模块对应的类名称为<code>TransformerEncoderLayer</code>和<code>TransformerDecoderLayer</code></li></ul></li><li><p>Layer表示的是单个模块，乘以N就是Encoder或Decoder</p></li></ul><h5 id="输入参数" tabindex="-1"><a class="header-anchor" href="#输入参数" aria-hidden="true">#</a> 输入参数</h5><ul><li><p><code>d_model</code>：代表单层编码器模型输入的特征维度大小</p></li><li><p><code>nhead</code>：代表注意力的数目</p></li><li><p><code>dim_feedforward</code>：代表FF层的两层神经网络中间层的特征数目</p></li><li><p><code>dropout</code>：代表丢弃层的丢弃概率</p></li><li><p>这两个模块都在内部自带层归一化</p></li></ul><h5 id="forward方法" tabindex="-1"><a class="header-anchor" href="#forward方法" aria-hidden="true">#</a> forward方法</h5><ul><li><code>src_key_padding_mask</code>：代表源序列中的有效单词（即不包括填充单词）的掩码表示</li><li><code>src_mask</code>：代表注意力机制的掩码表示，从源码可以看到，这部分相当于<code>MultiheadAttention</code>模块的<code>attn_mask</code></li></ul><h4 id="编码器和解码器" tabindex="-1"><a class="header-anchor" href="#编码器和解码器" aria-hidden="true">#</a> 编码器和解码器</h4><ul><li><p>对于<code>TransformerEncoder</code>和<code>TransformerDecoder</code>来说，需要分别传入对应单层的实例<code>TransformerEncoderLayer</code>和<code>TransformerDecoderLayer</code></p></li><li><p>然后设置对应模块数目<code>num_layers</code>，最后的输入<code>norm</code>则是对张量经过所有子模块的计算之后，对最终输出做归一化的类型，默认是None，即不做任何归一化处理</p></li><li><p>Transformer模型中不包含词嵌入模块，使用前需要自定义词嵌入和位置嵌入</p></li></ul>',46),n=[d];function o(t,c){return e(),l("div",null,n)}const s=i(r,[["render",o],["__file"," 文本与注意力.html.vue"]]);export{s as default};
